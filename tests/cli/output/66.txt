main : rule is 'nl_max'
load_header_files : rule is 'cmt_insert_file_header'
load_header_files : rule is 'cmt_insert_file_footer'
load_header_files : rule is 'cmt_insert_func_header'
load_header_files : rule is 'cmt_insert_class_header'
load_header_files : rule is 'cmt_insert_oc_msg_header'
uncrustify_file : rule is 'utf8_force'
uncrustify_file : rule is 'utf8_byte'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
find_punctuator : rule is 'enable_digraphs'
parse_next : rule is 'disable_processing_nl_cont'
tokenize : rule is 'newlines'
enum_cleanup : rule is 'mod_enum_last_comma'
do_braces : rule is 'mod_full_brace_if_chain'
do_braces : rule is 'mod_full_brace_if_chain_only'
do_braces : rule is 'mod_full_brace_if'
do_braces : rule is 'mod_full_brace_do'
do_braces : rule is 'mod_full_brace_for'
do_braces : rule is 'mod_full_brace_using'
do_braces : rule is 'mod_full_brace_while'
do_braces : rule is 'mod_full_brace_if'
do_braces : rule is 'mod_full_brace_do'
do_braces : rule is 'mod_full_brace_for'
do_braces : rule is 'mod_full_brace_function'
do_braces : rule is 'mod_full_brace_using'
do_braces : rule is 'mod_full_brace_while'
do_braces : rule is 'mod_case_brace'
do_braces : rule is 'mod_move_case_break'
uncrustify_file : rule is 'mod_remove_extra_semicolon'
uncrustify_file : rule is 'mod_remove_empty_return'
do_parens : rule is 'mod_full_paren_if_bool'
uncrustify_file : rule is 'nl_remove_extra_newlines'
newlines_cleanup_braces : rule is 'nl_struct_brace'
newlines_struct_union : rule is 'nl_define_macro'
newlines_cleanup_braces : rule is 'nl_ds_struct_enum_cmt'
newlines_cleanup_braces : rule is 'nl_brace_brace'
newlines_cleanup_braces : rule is 'nl_type_brace_init_lst_open'
newlines_cleanup_braces : rule is 'nl_type_brace_init_lst_close'
newlines_brace_pair : rule is 'nl_define_macro'
newlines_brace_pair : rule is 'nl_create_func_def_one_liner'
collapse_empty_body : rule is 'nl_collapse_empty_body'
newlines_brace_pair : rule is 'eat_blanks_after_open_brace'
newline_def_blk : rule is 'nl_var_def_blk_end'
newline_def_blk : rule is 'nl_var_def_blk_end'
newline_def_blk : rule is 'nl_var_def_blk_start'
newline_def_blk : rule is 'nl_var_def_blk_start'
newlines_cleanup_braces : rule is 'nl_func_decl_start'
newlines_cleanup_braces : rule is 'nl_func_def_start'
newlines_cleanup_braces : rule is 'nl_func_decl_start_single'
newlines_cleanup_braces : rule is 'nl_func_def_start_single'
newlines_cleanup_braces : rule is 'nl_func_decl_start_multi_line'
newlines_cleanup_braces : rule is 'nl_func_def_start_multi_line'
newlines_cleanup_braces : rule is 'nl_func_decl_args'
newlines_cleanup_braces : rule is 'nl_func_def_args'
newlines_cleanup_braces : rule is 'nl_func_decl_args_multi_line'
newlines_cleanup_braces : rule is 'nl_func_def_args_multi_line'
newlines_cleanup_braces : rule is 'nl_func_decl_end'
newlines_cleanup_braces : rule is 'nl_func_def_end'
newlines_cleanup_braces : rule is 'nl_func_decl_end_single'
newlines_cleanup_braces : rule is 'nl_func_def_end_single'
newlines_cleanup_braces : rule is 'nl_func_decl_end_multi_line'
newlines_cleanup_braces : rule is 'nl_func_def_end_multi_line'
newlines_cleanup_braces : rule is 'nl_func_decl_empty'
newlines_cleanup_braces : rule is 'nl_func_def_empty'
newlines_cleanup_braces : rule is 'nl_func_type_name'
newlines_cleanup_braces : rule is 'nl_func_type_name_class'
newlines_cleanup_braces : rule is 'nl_func_class_scope'
newlines_cleanup_braces : rule is 'nl_func_scope_name'
newlines_cleanup_braces : rule is 'nl_func_proto_type_name'
newlines_cleanup_braces : rule is 'nl_func_paren'
newlines_cleanup_braces : rule is 'nl_func_def_paren'
newlines_cleanup_braces : rule is 'nl_func_def_paren_empty'
newlines_cleanup_braces : rule is 'nl_func_paren_empty'
newlines_cleanup_braces : rule is 'nl_func_call_args'
newlines_cleanup_braces : rule is 'nl_func_decl_start'
newlines_cleanup_braces : rule is 'nl_func_def_start'
newlines_cleanup_braces : rule is 'nl_func_decl_start_single'
newlines_cleanup_braces : rule is 'nl_func_def_start_single'
newlines_cleanup_braces : rule is 'nl_func_decl_start_multi_line'
newlines_cleanup_braces : rule is 'nl_func_def_start_multi_line'
newlines_cleanup_braces : rule is 'nl_func_decl_args'
newlines_cleanup_braces : rule is 'nl_func_def_args'
newlines_cleanup_braces : rule is 'nl_func_decl_args_multi_line'
newlines_cleanup_braces : rule is 'nl_func_def_args_multi_line'
newlines_cleanup_braces : rule is 'nl_func_decl_end'
newlines_cleanup_braces : rule is 'nl_func_def_end'
newlines_cleanup_braces : rule is 'nl_func_decl_end_single'
newlines_cleanup_braces : rule is 'nl_func_def_end_single'
newlines_cleanup_braces : rule is 'nl_func_decl_end_multi_line'
newlines_cleanup_braces : rule is 'nl_func_def_end_multi_line'
newlines_cleanup_braces : rule is 'nl_func_decl_empty'
newlines_cleanup_braces : rule is 'nl_func_def_empty'
newlines_cleanup_braces : rule is 'nl_func_type_name'
newlines_cleanup_braces : rule is 'nl_func_type_name_class'
newlines_cleanup_braces : rule is 'nl_func_class_scope'
newlines_cleanup_braces : rule is 'nl_func_scope_name'
newlines_cleanup_braces : rule is 'nl_func_proto_type_name'
newlines_cleanup_braces : rule is 'nl_func_paren'
newlines_cleanup_braces : rule is 'nl_func_def_paren'
newlines_cleanup_braces : rule is 'nl_func_def_paren_empty'
newlines_cleanup_braces : rule is 'nl_func_paren_empty'
newlines_cleanup_braces : rule is 'nl_func_call_args'
newlines_cleanup_braces : rule is 'nl_func_decl_start'
newlines_cleanup_braces : rule is 'nl_func_def_start'
newlines_cleanup_braces : rule is 'nl_func_decl_start_single'
newlines_cleanup_braces : rule is 'nl_func_def_start_single'
newlines_cleanup_braces : rule is 'nl_func_decl_start_multi_line'
newlines_cleanup_braces : rule is 'nl_func_def_start_multi_line'
newlines_cleanup_braces : rule is 'nl_func_decl_args'
newlines_cleanup_braces : rule is 'nl_func_def_args'
newlines_cleanup_braces : rule is 'nl_func_decl_args_multi_line'
newlines_cleanup_braces : rule is 'nl_func_def_args_multi_line'
newlines_cleanup_braces : rule is 'nl_func_decl_end'
newlines_cleanup_braces : rule is 'nl_func_def_end'
newlines_cleanup_braces : rule is 'nl_func_decl_end_single'
newlines_cleanup_braces : rule is 'nl_func_def_end_single'
newlines_cleanup_braces : rule is 'nl_func_decl_end_multi_line'
newlines_cleanup_braces : rule is 'nl_func_def_end_multi_line'
newlines_cleanup_braces : rule is 'nl_func_decl_empty'
newlines_cleanup_braces : rule is 'nl_func_def_empty'
newlines_cleanup_braces : rule is 'nl_func_type_name'
newlines_cleanup_braces : rule is 'nl_func_type_name_class'
newlines_cleanup_braces : rule is 'nl_func_class_scope'
newlines_cleanup_braces : rule is 'nl_func_scope_name'
newlines_cleanup_braces : rule is 'nl_func_proto_type_name'
newlines_cleanup_braces : rule is 'nl_func_paren'
newlines_cleanup_braces : rule is 'nl_func_def_paren'
newlines_cleanup_braces : rule is 'nl_func_def_paren_empty'
newlines_cleanup_braces : rule is 'nl_func_paren_empty'
newlines_cleanup_braces : rule is 'nl_func_call_args'
newlines_cleanup_braces : rule is 'nl_before_opening_brace_func_class_def'
newlines_cleanup_braces : rule is 'nl_brace_brace'
newlines_cleanup_braces : rule is 'nl_type_brace_init_lst_open'
newlines_cleanup_braces : rule is 'nl_type_brace_init_lst_close'
newlines_brace_pair : rule is 'nl_define_macro'
newlines_brace_pair : rule is 'nl_create_func_def_one_liner'
newlines_brace_pair : rule is 'nl_fdef_brace_cond'
newlines_brace_pair : rule is 'nl_fdef_brace'
collapse_empty_body : rule is 'nl_collapse_empty_body'
newlines_brace_pair : rule is 'eat_blanks_after_open_brace'
newlines_cleanup_braces : rule is 'nl_brace_brace'
newlines_cleanup_braces : rule is 'nl_brace_square'
newlines_cleanup_braces : rule is 'nl_brace_fparen'
newlines_cleanup_braces : rule is 'nl_type_brace_init_lst_close'
newlines_cleanup_braces : rule is 'eat_blanks_before_close_brace'
newlines_cleanup_braces : rule is 'nl_brace_struct_var'
newlines_cleanup_braces : rule is 'nl_after_brace_close'
newlines_cleanup_braces : rule is 'nl_func_decl_start'
newlines_cleanup_braces : rule is 'nl_func_def_start'
newlines_cleanup_braces : rule is 'nl_func_decl_start_single'
newlines_cleanup_braces : rule is 'nl_func_def_start_single'
newlines_cleanup_braces : rule is 'nl_func_decl_start_multi_line'
newlines_cleanup_braces : rule is 'nl_func_def_start_multi_line'
newlines_cleanup_braces : rule is 'nl_func_decl_args'
newlines_cleanup_braces : rule is 'nl_func_def_args'
newlines_cleanup_braces : rule is 'nl_func_decl_args_multi_line'
newlines_cleanup_braces : rule is 'nl_func_def_args_multi_line'
newlines_cleanup_braces : rule is 'nl_func_decl_end'
newlines_cleanup_braces : rule is 'nl_func_def_end'
newlines_cleanup_braces : rule is 'nl_func_decl_end_single'
newlines_cleanup_braces : rule is 'nl_func_def_end_single'
newlines_cleanup_braces : rule is 'nl_func_decl_end_multi_line'
newlines_cleanup_braces : rule is 'nl_func_def_end_multi_line'
newlines_cleanup_braces : rule is 'nl_func_decl_empty'
newlines_cleanup_braces : rule is 'nl_func_def_empty'
newlines_cleanup_braces : rule is 'nl_func_type_name'
newlines_cleanup_braces : rule is 'nl_func_type_name_class'
newlines_cleanup_braces : rule is 'nl_func_class_scope'
newlines_cleanup_braces : rule is 'nl_func_scope_name'
newlines_cleanup_braces : rule is 'nl_func_proto_type_name'
newlines_cleanup_braces : rule is 'nl_func_paren'
newlines_cleanup_braces : rule is 'nl_func_def_paren'
newlines_cleanup_braces : rule is 'nl_func_def_paren_empty'
newlines_cleanup_braces : rule is 'nl_func_paren_empty'
newlines_cleanup_braces : rule is 'nl_func_call_args'
newlines_cleanup_braces : rule is 'nl_before_opening_brace_func_class_def'
newlines_cleanup_braces : rule is 'nl_brace_brace'
newlines_cleanup_braces : rule is 'nl_type_brace_init_lst_open'
newlines_cleanup_braces : rule is 'nl_type_brace_init_lst_close'
newlines_brace_pair : rule is 'nl_define_macro'
newlines_brace_pair : rule is 'nl_create_func_def_one_liner'
newlines_brace_pair : rule is 'nl_fdef_brace_cond'
newlines_brace_pair : rule is 'nl_fdef_brace'
collapse_empty_body : rule is 'nl_collapse_empty_body'
newlines_brace_pair : rule is 'eat_blanks_after_open_brace'
newlines_cleanup_braces : rule is 'nl_brace_brace'
newlines_cleanup_braces : rule is 'nl_brace_square'
newlines_cleanup_braces : rule is 'nl_brace_fparen'
newlines_cleanup_braces : rule is 'nl_type_brace_init_lst_close'
newlines_cleanup_braces : rule is 'eat_blanks_before_close_brace'
newlines_cleanup_braces : rule is 'nl_brace_struct_var'
newlines_cleanup_braces : rule is 'nl_after_brace_close'
newlines_cleanup_braces : rule is 'nl_after_semicolon'
newlines_cleanup_braces : rule is 'nl_after_semicolon'
newlines_cleanup_braces : rule is 'nl_brace_brace'
newlines_cleanup_braces : rule is 'nl_brace_square'
newlines_cleanup_braces : rule is 'nl_brace_fparen'
newlines_cleanup_braces : rule is 'nl_type_brace_init_lst_close'
newlines_cleanup_braces : rule is 'eat_blanks_before_close_brace'
newlines_cleanup_braces : rule is 'nl_brace_struct_var'
newlines_cleanup_braces : rule is 'nl_after_semicolon'
newline_def_blk : rule is 'nl_var_def_blk_end'
newline_def_blk : rule is 'nl_var_def_blk_end'
newline_def_blk : rule is 'nl_var_def_blk_start'
newline_def_blk : rule is 'nl_var_def_blk_start'
uncrustify_file : rule is 'nl_after_multiline_comment'
uncrustify_file : rule is 'nl_after_label_colon'
newlines_func_pre_blank_lines : rule is 'nl_before_func_class_def'
newlines_func_pre_blank_lines : rule is 'nl_before_func_class_proto'
newlines_func_pre_blank_lines : rule is 'nl_before_func_body_def'
newlines_func_pre_blank_lines : rule is 'nl_before_func_body_proto'
newlines_func_pre_blank_lines : rule is 'nl_before_func_class_def'
newlines_func_pre_blank_lines : rule is 'nl_before_func_class_proto'
newlines_func_pre_blank_lines : rule is 'nl_before_func_body_def'
newlines_func_pre_blank_lines : rule is 'nl_before_func_body_proto'
uncrustify_file : rule is 'pos_bool'
uncrustify_file : rule is 'pos_compare'
uncrustify_file : rule is 'pos_conditional'
uncrustify_file : rule is 'pos_comma'
uncrustify_file : rule is 'pos_enum_comma'
uncrustify_file : rule is 'pos_assign'
uncrustify_file : rule is 'pos_arith'
newlines_class_colon_pos : rule is 'pos_class_colon'
newlines_class_colon_pos : rule is 'nl_class_colon'
newlines_class_colon_pos : rule is 'nl_class_init_args'
newlines_class_colon_pos : rule is 'pos_class_comma'
newlines_class_colon_pos : rule is 'align_constr_value_span'
newlines_class_colon_pos : rule is 'pos_constr_colon'
newlines_class_colon_pos : rule is 'nl_constr_colon'
newlines_class_colon_pos : rule is 'nl_constr_init_args'
newlines_class_colon_pos : rule is 'pos_constr_comma'
newlines_class_colon_pos : rule is 'align_constr_value_span'
uncrustify_file : rule is 'nl_squeeze_ifdef'
uncrustify_file : rule is 'nl_squeeze_paren_close'
can_increase_nl : rule is 'nl_start_of_file'
can_increase_nl : rule is 'nl_end_of_file'
can_increase_nl : rule is 'nl_start_of_file'
can_increase_nl : rule is 'nl_end_of_file'
can_increase_nl : rule is 'nl_start_of_file'
can_increase_nl : rule is 'nl_end_of_file'
can_increase_nl : rule is 'nl_start_of_file'
can_increase_nl : rule is 'nl_end_of_file'
can_increase_nl : rule is 'nl_start_of_file'
can_increase_nl : rule is 'nl_end_of_file'
can_increase_nl : rule is 'nl_start_of_file'
can_increase_nl : rule is 'nl_end_of_file'
can_increase_nl : rule is 'nl_start_of_file'
can_increase_nl : rule is 'nl_end_of_file'
can_increase_nl : rule is 'nl_start_of_file'
can_increase_nl : rule is 'nl_end_of_file'
can_increase_nl : rule is 'nl_start_of_file'
can_increase_nl : rule is 'nl_end_of_file'
can_increase_nl : rule is 'nl_start_of_file'
can_increase_nl : rule is 'nl_end_of_file'
can_increase_nl : rule is 'nl_start_of_file'
can_increase_nl : rule is 'nl_end_of_file'
can_increase_nl : rule is 'nl_start_of_file'
can_increase_nl : rule is 'nl_end_of_file'
can_increase_nl : rule is 'nl_start_of_file'
can_increase_nl : rule is 'nl_end_of_file'
do_blank_lines : rule is 'nl_after_class'
do_blank_lines : rule is 'nl_after_struct'
newlines_functions_remove_extra_blank_lines : rule is 'nl_max_blank_in_func'
uncrustify_file : rule is 'sp_balance_nested_parens'
uncrustify_file : rule is 'mod_pawn_semicolon'
uncrustify_file : rule is 'mod_sort_import'
uncrustify_file : rule is 'mod_sort_include'
uncrustify_file : rule is 'mod_sort_using'
space_text : orig_line is 1, orig_col is 1, 'struct' type is STRUCT
space_text : back-to-back words need a space: pc->text() 'struct', next->text() 'TelegramIndex'
space_text : orig_line is 1, orig_col is 1, pc-text() 'struct', type is STRUCT
do_space : orig_line is 1, orig_col is 1, first->text() 'struct', type is STRUCT
do_space : first->orig_line is 1, first->orig_col is 1, first->text() is 'struct', [STRUCT/NONE] <===>
   second->orig_line is 1, second->orig_col is 8, second->text() 'TelegramIndex', [TYPE/STRUCT] : rule ADD[ ]
 <force between 'struct' and 'TelegramIndex'> rule = ADD @ 1 => 8
space_text : orig_line is 1, orig_col is 8, 'TelegramIndex' type is TYPE
space_text : orig_line is 1, orig_col is 8, pc-text() 'TelegramIndex', type is TYPE
do_space : orig_line is 1, orig_col is 8, first->text() 'TelegramIndex', type is TYPE
 rule = REMOVE @ 0 => 21
space_text : orig_line is 1, orig_col is 21, <Newline>, nl is 1
space_text : orig_line is 2, orig_col is 1, '{' type is BRACE_OPEN
space_text : orig_line is 2, orig_col is 1, pc-text() '{', type is BRACE_OPEN
do_space : orig_line is 2, orig_col is 1, first->text() '{', type is BRACE_OPEN
 rule = REMOVE @ 0 => 2
space_text : orig_line is 2, orig_col is 2, <Newline>, nl is 1
space_text : orig_line is 3, orig_col is 1, 'TelegramIndex' type is FUNC_CLASS_DEF
space_text : orig_line is 3, orig_col is 1, pc-text() 'TelegramIndex', type is FUNC_CLASS_DEF
do_space : orig_line is 3, orig_col is 1, first->text() 'TelegramIndex', type is FUNC_CLASS_DEF
do_space : first->orig_line is 3, first->orig_col is 1, first->text() is 'TelegramIndex', [FUNC_CLASS_DEF/NONE] <===>
   second->orig_line is 3, second->orig_col is 14, second->text() '(', [FPAREN_OPEN/FUNC_CLASS_DEF] : rule sp_func_class_paren[ ]
 rule = IGNORE @ 0 => 14
space_text : orig_line is 3, orig_col is 14, '(' type is FPAREN_OPEN
space_text : orig_line is 3, orig_col is 14, pc-text() '(', type is FPAREN_OPEN
do_space : orig_line is 3, orig_col is 14, first->text() '(', type is FPAREN_OPEN
do_space : first->orig_line is 3, first->orig_col is 14, first->text() is '(', [FPAREN_OPEN/FUNC_CLASS_DEF] <===>
   second->orig_line is 3, second->orig_col is 15, second->text() 'const', [QUALIFIER/NONE] : rule sp_inside_fparen[ ]
 rule = IGNORE @ 0 => 15
space_text : orig_line is 3, orig_col is 15, 'const' type is QUALIFIER
space_text : back-to-back words need a space: pc->text() 'const', next->text() 'char'
space_text : orig_line is 3, orig_col is 15, pc-text() 'const', type is QUALIFIER
do_space : orig_line is 3, orig_col is 15, first->text() 'const', type is QUALIFIER
do_space : first->orig_line is 3, first->orig_col is 15, first->text() is 'const', [QUALIFIER/NONE] <===>
   second->orig_line is 3, second->orig_col is 21, second->text() 'char', [TYPE/NONE] : rule sp_after_type[ ]
 <force between 'const' and 'char'> rule = FORCE @ 1 => 21
space_text : orig_line is 3, orig_col is 21, 'char' type is TYPE
space_text : orig_line is 3, orig_col is 21, pc-text() 'char', type is TYPE
do_space : orig_line is 3, orig_col is 21, first->text() 'char', type is TYPE
do_space : first->orig_line is 3, first->orig_col is 21, first->text() is 'char', [TYPE/NONE] <===>
   second->orig_line is 3, second->orig_col is 25, second->text() '*', [PTR_TYPE/NONE] : rule IGNORE[ ]
 rule = IGNORE @ 0 => 25
space_text : orig_line is 3, orig_col is 25, '*' type is PTR_TYPE
space_text : orig_line is 3, orig_col is 25, pc-text() '*', type is PTR_TYPE
do_space : orig_line is 3, orig_col is 25, first->text() '*', type is PTR_TYPE
do_space : first->orig_line is 3, first->orig_col is 25, first->text() is '*', [PTR_TYPE/NONE] <===>
   second->orig_line is 3, second->orig_col is 27, second->text() 'pN', [WORD/NONE] : rule IGNORE[ ]
 rule = IGNORE @ 1 => 27
space_text : orig_line is 3, orig_col is 27, 'pN' type is WORD
space_text : orig_line is 3, orig_col is 27, pc-text() 'pN', type is WORD
do_space : orig_line is 3, orig_col is 27, first->text() 'pN', type is WORD
do_space : first->orig_line is 3, first->orig_col is 27, first->text() is 'pN', [WORD/NONE] <===>
   second->orig_line is 3, second->orig_col is 29, second->text() ',', [COMMA/NONE] : rule sp_before_comma[ ]
 rule = REMOVE @ 0 => 29
space_text : orig_line is 3, orig_col is 29, ',' type is COMMA
space_text : orig_line is 3, orig_col is 29, pc-text() ',', type is COMMA
do_space : orig_line is 3, orig_col is 29, first->text() ',', type is COMMA
do_space : first->orig_line is 3, first->orig_col is 29, first->text() is ',', [COMMA/NONE] <===>
   second->orig_line is 3, second->orig_col is 31, second->text() 'unsigned', [TYPE/NONE] : rule sp_after_comma[ ]
 rule = IGNORE @ 1 => 31
space_text : orig_line is 3, orig_col is 31, 'unsigned' type is TYPE
space_text : back-to-back words need a space: pc->text() 'unsigned', next->text() 'long'
space_text : orig_line is 3, orig_col is 31, pc-text() 'unsigned', type is TYPE
do_space : orig_line is 3, orig_col is 31, first->text() 'unsigned', type is TYPE
do_space : first->orig_line is 3, first->orig_col is 31, first->text() is 'unsigned', [TYPE/NONE] <===>
   second->orig_line is 3, second->orig_col is 40, second->text() 'long', [TYPE/NONE] : rule sp_after_type[ ]
 <force between 'unsigned' and 'long'> rule = FORCE @ 1 => 40
space_text : orig_line is 3, orig_col is 40, 'long' type is TYPE
space_text : back-to-back words need a space: pc->text() 'long', next->text() 'nI'
space_text : orig_line is 3, orig_col is 40, pc-text() 'long', type is TYPE
do_space : orig_line is 3, orig_col is 40, first->text() 'long', type is TYPE
do_space : first->orig_line is 3, first->orig_col is 40, first->text() is 'long', [TYPE/NONE] <===>
   second->orig_line is 3, second->orig_col is 45, second->text() 'nI', [WORD/NONE] : rule sp_after_type[ ]
 <force between 'long' and 'nI'> rule = FORCE @ 1 => 45
space_text : orig_line is 3, orig_col is 45, 'nI' type is WORD
space_text : orig_line is 3, orig_col is 45, pc-text() 'nI', type is WORD
do_space : orig_line is 3, orig_col is 45, first->text() 'nI', type is WORD
do_space : first->orig_line is 3, first->orig_col is 45, first->text() is 'nI', [WORD/NONE] <===>
   second->orig_line is 3, second->orig_col is 47, second->text() ')', [FPAREN_CLOSE/FUNC_CLASS_DEF] : rule sp_inside_fparen[ ]
 rule = IGNORE @ 0 => 47
space_text : orig_line is 3, orig_col is 47, ')' type is FPAREN_CLOSE
find_punctuator : rule is 'enable_digraphs'
space_text : orig_line is 3, orig_col is 47, pc-text() ')', type is FPAREN_CLOSE
do_space : orig_line is 3, orig_col is 47, first->text() ')', type is FPAREN_CLOSE
do_space : first->orig_line is 3, first->orig_col is 47, first->text() is ')', [FPAREN_CLOSE/FUNC_CLASS_DEF] <===>
   second->orig_line is 3, second->orig_col is 49, second->text() ':', [CONSTR_COLON/NONE] : rule ADD[ ]
 rule = ADD @ 1 => 49
space_text : orig_line is 3, orig_col is 49, ':' type is CONSTR_COLON
space_text : orig_line is 3, orig_col is 49, pc-text() ':', type is CONSTR_COLON
do_space : orig_line is 3, orig_col is 49, first->text() ':', type is CONSTR_COLON
 rule = REMOVE @ 0 => 50
space_text : orig_line is 3, orig_col is 50, <Newline>, nl is 1
space_text : orig_line is 4, orig_col is 1, 'pTelName' type is FUNC_CTOR_VAR
space_text : orig_line is 4, orig_col is 1, pc-text() 'pTelName', type is FUNC_CTOR_VAR
do_space : orig_line is 4, orig_col is 1, first->text() 'pTelName', type is FUNC_CTOR_VAR
do_space : first->orig_line is 4, first->orig_col is 1, first->text() is 'pTelName', [FUNC_CTOR_VAR/NONE] <===>
   second->orig_line is 4, second->orig_col is 9, second->text() '(', [FPAREN_OPEN/FUNC_CTOR_VAR] : rule sp_func_call_paren[ ]
 rule = IGNORE @ 0 => 9
space_text : orig_line is 4, orig_col is 9, '(' type is FPAREN_OPEN
space_text : orig_line is 4, orig_col is 9, pc-text() '(', type is FPAREN_OPEN
do_space : orig_line is 4, orig_col is 9, first->text() '(', type is FPAREN_OPEN
do_space : first->orig_line is 4, first->orig_col is 9, first->text() is '(', [FPAREN_OPEN/FUNC_CTOR_VAR] <===>
   second->orig_line is 4, second->orig_col is 10, second->text() 'pN', [WORD/NONE] : rule sp_inside_fparen[ ]
 rule = IGNORE @ 0 => 10
space_text : orig_line is 4, orig_col is 10, 'pN' type is WORD
space_text : orig_line is 4, orig_col is 10, pc-text() 'pN', type is WORD
do_space : orig_line is 4, orig_col is 10, first->text() 'pN', type is WORD
do_space : first->orig_line is 4, first->orig_col is 10, first->text() is 'pN', [WORD/NONE] <===>
   second->orig_line is 4, second->orig_col is 12, second->text() ')', [FPAREN_CLOSE/FUNC_CTOR_VAR] : rule sp_inside_fparen[ ]
 rule = IGNORE @ 0 => 12
space_text : orig_line is 4, orig_col is 12, ')' type is FPAREN_CLOSE
find_punctuator : rule is 'enable_digraphs'
space_text : orig_line is 4, orig_col is 12, pc-text() ')', type is FPAREN_CLOSE
do_space : orig_line is 4, orig_col is 12, first->text() ')', type is FPAREN_CLOSE
do_space : first->orig_line is 4, first->orig_col is 12, first->text() is ')', [FPAREN_CLOSE/FUNC_CTOR_VAR] <===>
   second->orig_line is 4, second->orig_col is 13, second->text() ',', [COMMA/NONE] : rule sp_before_comma[ ]
 rule = REMOVE @ 0 => 13
space_text : orig_line is 4, orig_col is 13, ',' type is COMMA
space_text : orig_line is 4, orig_col is 13, pc-text() ',', type is COMMA
do_space : orig_line is 4, orig_col is 13, first->text() ',', type is COMMA
 rule = REMOVE @ 0 => 14
space_text : orig_line is 4, orig_col is 14, <Newline>, nl is 1
space_text : orig_line is 5, orig_col is 1, 'nTelIndex' type is FUNC_CTOR_VAR
space_text : orig_line is 5, orig_col is 1, pc-text() 'nTelIndex', type is FUNC_CTOR_VAR
do_space : orig_line is 5, orig_col is 1, first->text() 'nTelIndex', type is FUNC_CTOR_VAR
do_space : first->orig_line is 5, first->orig_col is 1, first->text() is 'nTelIndex', [FUNC_CTOR_VAR/NONE] <===>
   second->orig_line is 5, second->orig_col is 10, second->text() '(', [FPAREN_OPEN/FUNC_CTOR_VAR] : rule sp_func_call_paren[ ]
 rule = IGNORE @ 0 => 10
space_text : orig_line is 5, orig_col is 10, '(' type is FPAREN_OPEN
space_text : orig_line is 5, orig_col is 10, pc-text() '(', type is FPAREN_OPEN
do_space : orig_line is 5, orig_col is 10, first->text() '(', type is FPAREN_OPEN
do_space : first->orig_line is 5, first->orig_col is 10, first->text() is '(', [FPAREN_OPEN/FUNC_CTOR_VAR] <===>
   second->orig_line is 5, second->orig_col is 11, second->text() 'n', [WORD/NONE] : rule sp_inside_fparen[ ]
 rule = IGNORE @ 0 => 11
space_text : orig_line is 5, orig_col is 11, 'n' type is WORD
space_text : orig_line is 5, orig_col is 11, pc-text() 'n', type is WORD
do_space : orig_line is 5, orig_col is 11, first->text() 'n', type is WORD
do_space : first->orig_line is 5, first->orig_col is 11, first->text() is 'n', [WORD/NONE] <===>
   second->orig_line is 5, second->orig_col is 12, second->text() ')', [FPAREN_CLOSE/FUNC_CTOR_VAR] : rule sp_inside_fparen[ ]
 rule = IGNORE @ 0 => 12
space_text : orig_line is 5, orig_col is 12, ')' type is FPAREN_CLOSE
space_text : orig_line is 5, orig_col is 12, pc-text() ')', type is FPAREN_CLOSE
do_space : orig_line is 5, orig_col is 12, first->text() ')', type is FPAREN_CLOSE
 rule = REMOVE @ 0 => 13
space_text : orig_line is 5, orig_col is 13, <Newline>, nl is 1
space_text : orig_line is 6, orig_col is 1, '{' type is BRACE_OPEN
space_text : orig_line is 6, orig_col is 1, pc-text() '{', type is BRACE_OPEN
do_space : orig_line is 6, orig_col is 1, first->text() '{', type is BRACE_OPEN
 rule = REMOVE @ 0 => 2
space_text : orig_line is 6, orig_col is 2, <Newline>, nl is 1
space_text : orig_line is 7, orig_col is 1, '}' type is BRACE_CLOSE
space_text : orig_line is 7, orig_col is 1, pc-text() '}', type is BRACE_CLOSE
do_space : orig_line is 7, orig_col is 1, first->text() '}', type is BRACE_CLOSE
 rule = REMOVE @ 0 => 2
space_text : orig_line is 7, orig_col is 2, <Newline>, nl is 2
space_text : orig_line is 9, orig_col is 1, '~' type is DESTRUCTOR
space_text : orig_line is 9, orig_col is 1, pc-text() '~', type is DESTRUCTOR
do_space : orig_line is 9, orig_col is 1, first->text() '~', type is DESTRUCTOR
do_space : first->orig_line is 9, first->orig_col is 1, first->text() is '~', [DESTRUCTOR/NONE] <===>
   second->orig_line is 9, second->orig_col is 2, second->text() 'TelegramIndex', [FUNC_CLASS_DEF/DESTRUCTOR] : rule REMOVE[ ]
 rule = REMOVE @ 0 => 2
space_text : orig_line is 9, orig_col is 2, 'TelegramIndex' type is FUNC_CLASS_DEF
space_text : orig_line is 9, orig_col is 2, pc-text() 'TelegramIndex', type is FUNC_CLASS_DEF
do_space : orig_line is 9, orig_col is 2, first->text() 'TelegramIndex', type is FUNC_CLASS_DEF
do_space : first->orig_line is 9, first->orig_col is 2, first->text() is 'TelegramIndex', [FUNC_CLASS_DEF/DESTRUCTOR] <===>
   second->orig_line is 9, second->orig_col is 15, second->text() '(', [FPAREN_OPEN/FUNC_CLASS_DEF] : rule sp_func_class_paren[ ]
 rule = IGNORE @ 0 => 15
space_text : orig_line is 9, orig_col is 15, '(' type is FPAREN_OPEN
find_punctuator : rule is 'enable_digraphs'
space_text : orig_line is 9, orig_col is 15, pc-text() '(', type is FPAREN_OPEN
do_space : orig_line is 9, orig_col is 15, first->text() '(', type is FPAREN_OPEN
do_space : first->orig_line is 9, first->orig_col is 15, first->text() is '(', [FPAREN_OPEN/FUNC_CLASS_DEF] <===>
   second->orig_line is 9, second->orig_col is 16, second->text() ')', [FPAREN_CLOSE/FUNC_CLASS_DEF] : rule sp_inside_fparens[ ]
 rule = IGNORE @ 0 => 16
space_text : orig_line is 9, orig_col is 16, ')' type is FPAREN_CLOSE
space_text : orig_line is 9, orig_col is 16, pc-text() ')', type is FPAREN_CLOSE
do_space : orig_line is 9, orig_col is 16, first->text() ')', type is FPAREN_CLOSE
 rule = REMOVE @ 0 => 17
space_text : orig_line is 9, orig_col is 17, <Newline>, nl is 1
space_text : orig_line is 10, orig_col is 1, '{' type is BRACE_OPEN
space_text : orig_line is 10, orig_col is 1, pc-text() '{', type is BRACE_OPEN
do_space : orig_line is 10, orig_col is 1, first->text() '{', type is BRACE_OPEN
 rule = REMOVE @ 0 => 2
space_text : orig_line is 10, orig_col is 2, <Newline>, nl is 1
space_text : orig_line is 11, orig_col is 1, '}' type is BRACE_CLOSE
space_text : orig_line is 11, orig_col is 1, pc-text() '}', type is BRACE_CLOSE
do_space : orig_line is 11, orig_col is 1, first->text() '}', type is BRACE_CLOSE
 rule = REMOVE @ 0 => 2
space_text : orig_line is 11, orig_col is 2, <Newline>, nl is 2
space_text : orig_line is 13, orig_col is 1, 'const' type is QUALIFIER
space_text : back-to-back words need a space: pc->text() 'const', next->text() 'char'
space_text : orig_line is 13, orig_col is 1, pc-text() 'const', type is QUALIFIER
do_space : orig_line is 13, orig_col is 1, first->text() 'const', type is QUALIFIER
do_space : first->orig_line is 13, first->orig_col is 1, first->text() is 'const', [QUALIFIER/NONE] <===>
   second->orig_line is 13, second->orig_col is 7, second->text() 'char', [TYPE/NONE] : rule sp_after_type[ ]
 <force between 'const' and 'char'> rule = FORCE @ 1 => 7
space_text : orig_line is 13, orig_col is 7, 'char' type is TYPE
space_text : orig_line is 13, orig_col is 7, pc-text() 'char', type is TYPE
do_space : orig_line is 13, orig_col is 7, first->text() 'char', type is TYPE
do_space : first->orig_line is 13, first->orig_col is 7, first->text() is 'char', [TYPE/NONE] <===>
   second->orig_line is 13, second->orig_col is 11, second->text() '*', [PTR_TYPE/NONE] : rule IGNORE[ ]
 rule = IGNORE @ 0 => 11
space_text : orig_line is 13, orig_col is 11, '*' type is PTR_TYPE
space_text : orig_line is 13, orig_col is 11, pc-text() '*', type is PTR_TYPE
do_space : orig_line is 13, orig_col is 11, first->text() '*', type is PTR_TYPE
do_space : first->orig_line is 13, first->orig_col is 11, first->text() is '*', [PTR_TYPE/NONE] <===>
   second->orig_line is 13, second->orig_col is 13, second->text() 'const', [QUALIFIER/NONE] : rule IGNORE[ ]
 rule = IGNORE @ 1 => 13
space_text : orig_line is 13, orig_col is 13, 'const' type is QUALIFIER
space_text : back-to-back words need a space: pc->text() 'const', next->text() 'pTelName'
space_text : orig_line is 13, orig_col is 13, pc-text() 'const', type is QUALIFIER
do_space : orig_line is 13, orig_col is 13, first->text() 'const', type is QUALIFIER
do_space : first->orig_line is 13, first->orig_col is 13, first->text() is 'const', [QUALIFIER/NONE] <===>
   second->orig_line is 13, second->orig_col is 19, second->text() 'pTelName', [WORD/NONE] : rule sp_after_type[ ]
 <force between 'const' and 'pTelName'> rule = FORCE @ 1 => 19
space_text : orig_line is 13, orig_col is 19, 'pTelName' type is WORD
space_text : orig_line is 13, orig_col is 19, pc-text() 'pTelName', type is WORD
do_space : orig_line is 13, orig_col is 19, first->text() 'pTelName', type is WORD
do_space : first->orig_line is 13, first->orig_col is 19, first->text() is 'pTelName', [WORD/NONE] <===>
   second->orig_line is 13, second->orig_col is 27, second->text() ';', [SEMICOLON/NONE] : rule sp_before_semi[ ]
 rule = REMOVE @ 0 => 27
space_text : orig_line is 13, orig_col is 27, ';' type is SEMICOLON
space_text : orig_line is 13, orig_col is 27, pc-text() ';', type is SEMICOLON
do_space : orig_line is 13, orig_col is 27, first->text() ';', type is SEMICOLON
 rule = REMOVE @ 0 => 28
space_text : orig_line is 13, orig_col is 28, <Newline>, nl is 1
space_text : orig_line is 14, orig_col is 1, 'unsigned' type is TYPE
space_text : back-to-back words need a space: pc->text() 'unsigned', next->text() 'long'
space_text : orig_line is 14, orig_col is 1, pc-text() 'unsigned', type is TYPE
do_space : orig_line is 14, orig_col is 1, first->text() 'unsigned', type is TYPE
do_space : first->orig_line is 14, first->orig_col is 1, first->text() is 'unsigned', [TYPE/NONE] <===>
   second->orig_line is 14, second->orig_col is 10, second->text() 'long', [TYPE/NONE] : rule sp_after_type[ ]
 <force between 'unsigned' and 'long'> rule = FORCE @ 1 => 10
space_text : orig_line is 14, orig_col is 10, 'long' type is TYPE
space_text : back-to-back words need a space: pc->text() 'long', next->text() 'nTelIndex'
space_text : orig_line is 14, orig_col is 10, pc-text() 'long', type is TYPE
do_space : orig_line is 14, orig_col is 10, first->text() 'long', type is TYPE
do_space : first->orig_line is 14, first->orig_col is 10, first->text() is 'long', [TYPE/NONE] <===>
   second->orig_line is 14, second->orig_col is 15, second->text() 'nTelIndex', [WORD/NONE] : rule sp_after_type[ ]
 <force between 'long' and 'nTelIndex'> rule = FORCE @ 1 => 15
space_text : orig_line is 14, orig_col is 15, 'nTelIndex' type is WORD
space_text : orig_line is 14, orig_col is 15, pc-text() 'nTelIndex', type is WORD
do_space : orig_line is 14, orig_col is 15, first->text() 'nTelIndex', type is WORD
do_space : first->orig_line is 14, first->orig_col is 15, first->text() is 'nTelIndex', [WORD/NONE] <===>
   second->orig_line is 14, second->orig_col is 24, second->text() ';', [SEMICOLON/NONE] : rule sp_before_semi[ ]
 rule = REMOVE @ 0 => 24
space_text : orig_line is 14, orig_col is 24, ';' type is SEMICOLON
space_text : orig_line is 14, orig_col is 24, pc-text() ';', type is SEMICOLON
do_space : orig_line is 14, orig_col is 24, first->text() ';', type is SEMICOLON
 rule = REMOVE @ 0 => 25
space_text : orig_line is 14, orig_col is 25, <Newline>, nl is 1
space_text : orig_line is 15, orig_col is 1, '}' type is BRACE_CLOSE
find_punctuator : rule is 'enable_digraphs'
space_text : orig_line is 15, orig_col is 1, pc-text() '}', type is BRACE_CLOSE
do_space : orig_line is 15, orig_col is 1, first->text() '}', type is BRACE_CLOSE
do_space : first->orig_line is 15, first->orig_col is 1, first->text() is '}', [BRACE_CLOSE/STRUCT] <===>
   second->orig_line is 15, second->orig_col is 2, second->text() ';', [SEMICOLON/STRUCT] : rule sp_before_semi[ ]
 rule = REMOVE @ 0 => 2
space_text : orig_line is 15, orig_col is 2, ';' type is SEMICOLON
space_text : orig_line is 15, orig_col is 2, pc-text() ';', type is SEMICOLON
do_space : orig_line is 15, orig_col is 2, first->text() ';', type is SEMICOLON
 rule = REMOVE @ 0 => 3
space_text : orig_line is 15, orig_col is 3, <Newline>, nl is 2
uncrustify_file : rule is 'align_pp_define_span'
indent_text : rule is 'indent_columns'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_macro_brace'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
space_col_align : first->orig_line is 3, orig_col is 1, [FUNC_CLASS_DEF/NONE], text() 'TelegramIndex' <==>
space_col_align : second->orig_line is 3, orig_col is 14 [FPAREN_OPEN/FUNC_CLASS_DEF], text() '(', [CallStack]
do_space : orig_line is 3, orig_col is 1, first->text() 'TelegramIndex', type is FUNC_CLASS_DEF
do_space : first->orig_line is 3, first->orig_col is 1, first->text() is 'TelegramIndex', [FUNC_CLASS_DEF/NONE] <===>
   second->orig_line is 3, second->orig_col is 14, second->text() '(', [FPAREN_OPEN/FUNC_CLASS_DEF] : rule sp_func_class_paren[ ]
space_col_align : av is ignore
space_col_align :    len is 13
space_col_align :    => coldiff is 13
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 3
space_col_align :    => second->orig_line is 3
space_col_align :    => first->text()     is 'TelegramIndex'
space_col_align :    => second->text()    is '('
space_col_align :    => first->orig_col   is 1
space_col_align :    => second->orig_col  is 14
space_col_align :    => first->len()      is 13
space_col_align :    => coldiff is 13
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 3, orig_col is 14, [FPAREN_OPEN/FUNC_CLASS_DEF], text() '(' <==>
space_col_align : second->orig_line is 3, orig_col is 15 [QUALIFIER/NONE], text() 'const', [CallStack]
do_space : orig_line is 3, orig_col is 14, first->text() '(', type is FPAREN_OPEN
do_space : first->orig_line is 3, first->orig_col is 14, first->text() is '(', [FPAREN_OPEN/FUNC_CLASS_DEF] <===>
   second->orig_line is 3, second->orig_col is 15, second->text() 'const', [QUALIFIER/NONE] : rule sp_inside_fparen[ ]
space_col_align : av is ignore
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 3
space_col_align :    => second->orig_line is 3
space_col_align :    => first->text()     is '('
space_col_align :    => second->text()    is 'const'
space_col_align :    => first->orig_col   is 14
space_col_align :    => second->orig_col  is 15
space_col_align :    => first->len()      is 1
space_col_align :    => coldiff is 1
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 3, orig_col is 15, [QUALIFIER/NONE], text() 'const' <==>
space_col_align : second->orig_line is 3, orig_col is 21 [TYPE/NONE], text() 'char', [CallStack]
do_space : orig_line is 3, orig_col is 15, first->text() 'const', type is QUALIFIER
do_space : first->orig_line is 3, first->orig_col is 15, first->text() is 'const', [QUALIFIER/NONE] <===>
   second->orig_line is 3, second->orig_col is 21, second->text() 'char', [TYPE/NONE] : rule sp_after_type[ ]
 <force between 'const' and 'char'>space_col_align : av is force
space_col_align :    len is 5
space_col_align :    => coldiff is 5
space_col_align :    => av is FORCE
space_col_align :    => coldiff is 6
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 3, orig_col is 21, [TYPE/NONE], text() 'char' <==>
space_col_align : second->orig_line is 3, orig_col is 25 [PTR_TYPE/NONE], text() '*', [CallStack]
do_space : orig_line is 3, orig_col is 21, first->text() 'char', type is TYPE
do_space : first->orig_line is 3, first->orig_col is 21, first->text() is 'char', [TYPE/NONE] <===>
   second->orig_line is 3, second->orig_col is 25, second->text() '*', [PTR_TYPE/NONE] : rule IGNORE[ ]
space_col_align : av is ignore
space_col_align :    len is 4
space_col_align :    => coldiff is 4
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 3
space_col_align :    => second->orig_line is 3
space_col_align :    => first->text()     is 'char'
space_col_align :    => second->text()    is '*'
space_col_align :    => first->orig_col   is 21
space_col_align :    => second->orig_col  is 25
space_col_align :    => first->len()      is 4
space_col_align :    => coldiff is 4
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 3, orig_col is 25, [PTR_TYPE/NONE], text() '*' <==>
space_col_align : second->orig_line is 3, orig_col is 27 [WORD/NONE], text() 'pN', [CallStack]
do_space : orig_line is 3, orig_col is 25, first->text() '*', type is PTR_TYPE
do_space : first->orig_line is 3, first->orig_col is 25, first->text() is '*', [PTR_TYPE/NONE] <===>
   second->orig_line is 3, second->orig_col is 27, second->text() 'pN', [WORD/NONE] : rule IGNORE[ ]
space_col_align : av is ignore
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 3
space_col_align :    => second->orig_line is 3
space_col_align :    => first->text()     is '*'
space_col_align :    => second->text()    is 'pN'
space_col_align :    => first->orig_col   is 25
space_col_align :    => second->orig_col  is 27
space_col_align :    => first->len()      is 1
space_col_align :    => coldiff is 2
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 3, orig_col is 27, [WORD/NONE], text() 'pN' <==>
space_col_align : second->orig_line is 3, orig_col is 29 [COMMA/NONE], text() ',', [CallStack]
do_space : orig_line is 3, orig_col is 27, first->text() 'pN', type is WORD
do_space : first->orig_line is 3, first->orig_col is 27, first->text() is 'pN', [WORD/NONE] <===>
   second->orig_line is 3, second->orig_col is 29, second->text() ',', [COMMA/NONE] : rule sp_before_comma[ ]
space_col_align : av is remove
space_col_align :    len is 2
space_col_align :    => coldiff is 2
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 2
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 3, orig_col is 29, [COMMA/NONE], text() ',' <==>
space_col_align : second->orig_line is 3, orig_col is 31 [TYPE/NONE], text() 'unsigned', [CallStack]
do_space : orig_line is 3, orig_col is 29, first->text() ',', type is COMMA
do_space : first->orig_line is 3, first->orig_col is 29, first->text() is ',', [COMMA/NONE] <===>
   second->orig_line is 3, second->orig_col is 31, second->text() 'unsigned', [TYPE/NONE] : rule sp_after_comma[ ]
space_col_align : av is ignore
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 3
space_col_align :    => second->orig_line is 3
space_col_align :    => first->text()     is ','
space_col_align :    => second->text()    is 'unsigned'
space_col_align :    => first->orig_col   is 29
space_col_align :    => second->orig_col  is 31
space_col_align :    => first->len()      is 1
space_col_align :    => coldiff is 2
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 3, orig_col is 31, [TYPE/NONE], text() 'unsigned' <==>
space_col_align : second->orig_line is 3, orig_col is 40 [TYPE/NONE], text() 'long', [CallStack]
do_space : orig_line is 3, orig_col is 31, first->text() 'unsigned', type is TYPE
do_space : first->orig_line is 3, first->orig_col is 31, first->text() is 'unsigned', [TYPE/NONE] <===>
   second->orig_line is 3, second->orig_col is 40, second->text() 'long', [TYPE/NONE] : rule sp_after_type[ ]
 <force between 'unsigned' and 'long'>space_col_align : av is force
space_col_align :    len is 8
space_col_align :    => coldiff is 8
space_col_align :    => av is FORCE
space_col_align :    => coldiff is 9
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 3, orig_col is 40, [TYPE/NONE], text() 'long' <==>
space_col_align : second->orig_line is 3, orig_col is 45 [WORD/NONE], text() 'nI', [CallStack]
do_space : orig_line is 3, orig_col is 40, first->text() 'long', type is TYPE
do_space : first->orig_line is 3, first->orig_col is 40, first->text() is 'long', [TYPE/NONE] <===>
   second->orig_line is 3, second->orig_col is 45, second->text() 'nI', [WORD/NONE] : rule sp_after_type[ ]
 <force between 'long' and 'nI'>space_col_align : av is force
space_col_align :    len is 4
space_col_align :    => coldiff is 4
space_col_align :    => av is FORCE
space_col_align :    => coldiff is 5
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 3, orig_col is 45, [WORD/NONE], text() 'nI' <==>
space_col_align : second->orig_line is 3, orig_col is 47 [FPAREN_CLOSE/FUNC_CLASS_DEF], text() ')', [CallStack]
do_space : orig_line is 3, orig_col is 45, first->text() 'nI', type is WORD
do_space : first->orig_line is 3, first->orig_col is 45, first->text() is 'nI', [WORD/NONE] <===>
   second->orig_line is 3, second->orig_col is 47, second->text() ')', [FPAREN_CLOSE/FUNC_CLASS_DEF] : rule sp_inside_fparen[ ]
space_col_align : av is ignore
space_col_align :    len is 2
space_col_align :    => coldiff is 2
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 3
space_col_align :    => second->orig_line is 3
space_col_align :    => first->text()     is 'nI'
space_col_align :    => second->text()    is ')'
space_col_align :    => first->orig_col   is 45
space_col_align :    => second->orig_col  is 47
space_col_align :    => first->len()      is 2
space_col_align :    => coldiff is 2
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 3, orig_col is 47, [FPAREN_CLOSE/FUNC_CLASS_DEF], text() ')' <==>
space_col_align : second->orig_line is 3, orig_col is 49 [CONSTR_COLON/NONE], text() ':', [CallStack]
do_space : orig_line is 3, orig_col is 47, first->text() ')', type is FPAREN_CLOSE
do_space : first->orig_line is 3, first->orig_col is 47, first->text() is ')', [FPAREN_CLOSE/FUNC_CLASS_DEF] <===>
   second->orig_line is 3, second->orig_col is 49, second->text() ':', [CONSTR_COLON/NONE] : rule ADD[ ]
space_col_align : av is add
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is ADD
space_col_align :    => coldiff is 2
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 3, orig_col is 49, [CONSTR_COLON/NONE], text() ':' <==>
space_col_align : second->orig_line is 3, orig_col is 50 [NEWLINE/NONE], text() '', [CallStack]
do_space : orig_line is 3, orig_col is 49, first->text() ':', type is CONSTR_COLON
space_col_align : av is remove
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
reindent_line : rule is 'indent_relative_single_line_comments'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_align_paren'
indent_text : rule is 'indent_paren_nl'
indent_text : rule is 'indent_square_nl'
indent_text : rule is 'indent_paren_after_func_def'
indent_text : rule is 'indent_paren_after_func_decl'
indent_text : rule is 'indent_paren_after_func_call'
indent_text : rule is 'use_indent_continue_only_once'
indent_text : rule is 'indent_paren_after_func_decl'
indent_text : rule is 'indent_paren_after_func_def'
indent_text : rule is 'indent_paren_after_func_call'
indent_text : rule is 'indent_continue'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_class_colon'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
space_col_align : first->orig_line is 4, orig_col is 1, [FUNC_CTOR_VAR/NONE], text() 'pTelName' <==>
space_col_align : second->orig_line is 4, orig_col is 9 [FPAREN_OPEN/FUNC_CTOR_VAR], text() '(', [CallStack]
do_space : orig_line is 4, orig_col is 1, first->text() 'pTelName', type is FUNC_CTOR_VAR
do_space : first->orig_line is 4, first->orig_col is 1, first->text() is 'pTelName', [FUNC_CTOR_VAR/NONE] <===>
   second->orig_line is 4, second->orig_col is 9, second->text() '(', [FPAREN_OPEN/FUNC_CTOR_VAR] : rule sp_func_call_paren[ ]
space_col_align : av is ignore
space_col_align :    len is 8
space_col_align :    => coldiff is 8
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 4
space_col_align :    => second->orig_line is 4
space_col_align :    => first->text()     is 'pTelName'
space_col_align :    => second->text()    is '('
space_col_align :    => first->orig_col   is 1
space_col_align :    => second->orig_col  is 9
space_col_align :    => first->len()      is 8
space_col_align :    => coldiff is 8
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 4, orig_col is 9, [FPAREN_OPEN/FUNC_CTOR_VAR], text() '(' <==>
space_col_align : second->orig_line is 4, orig_col is 10 [WORD/NONE], text() 'pN', [CallStack]
do_space : orig_line is 4, orig_col is 9, first->text() '(', type is FPAREN_OPEN
do_space : first->orig_line is 4, first->orig_col is 9, first->text() is '(', [FPAREN_OPEN/FUNC_CTOR_VAR] <===>
   second->orig_line is 4, second->orig_col is 10, second->text() 'pN', [WORD/NONE] : rule sp_inside_fparen[ ]
space_col_align : av is ignore
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 4
space_col_align :    => second->orig_line is 4
space_col_align :    => first->text()     is '('
space_col_align :    => second->text()    is 'pN'
space_col_align :    => first->orig_col   is 9
space_col_align :    => second->orig_col  is 10
space_col_align :    => first->len()      is 1
space_col_align :    => coldiff is 1
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 4, orig_col is 10, [WORD/NONE], text() 'pN' <==>
space_col_align : second->orig_line is 4, orig_col is 12 [FPAREN_CLOSE/FUNC_CTOR_VAR], text() ')', [CallStack]
do_space : orig_line is 4, orig_col is 10, first->text() 'pN', type is WORD
do_space : first->orig_line is 4, first->orig_col is 10, first->text() is 'pN', [WORD/NONE] <===>
   second->orig_line is 4, second->orig_col is 12, second->text() ')', [FPAREN_CLOSE/FUNC_CTOR_VAR] : rule sp_inside_fparen[ ]
space_col_align : av is ignore
space_col_align :    len is 2
space_col_align :    => coldiff is 2
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 4
space_col_align :    => second->orig_line is 4
space_col_align :    => first->text()     is 'pN'
space_col_align :    => second->text()    is ')'
space_col_align :    => first->orig_col   is 10
space_col_align :    => second->orig_col  is 12
space_col_align :    => first->len()      is 2
space_col_align :    => coldiff is 2
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 4, orig_col is 12, [FPAREN_CLOSE/FUNC_CTOR_VAR], text() ')' <==>
space_col_align : second->orig_line is 4, orig_col is 13 [COMMA/NONE], text() ',', [CallStack]
do_space : orig_line is 4, orig_col is 12, first->text() ')', type is FPAREN_CLOSE
do_space : first->orig_line is 4, first->orig_col is 12, first->text() is ')', [FPAREN_CLOSE/FUNC_CTOR_VAR] <===>
   second->orig_line is 4, second->orig_col is 13, second->text() ',', [COMMA/NONE] : rule sp_before_comma[ ]
space_col_align : av is remove
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 4, orig_col is 13, [COMMA/NONE], text() ',' <==>
space_col_align : second->orig_line is 4, orig_col is 14 [NEWLINE/NONE], text() '', [CallStack]
do_space : orig_line is 4, orig_col is 13, first->text() ',', type is COMMA
space_col_align : av is remove
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
reindent_line : rule is 'indent_relative_single_line_comments'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_align_paren'
indent_text : rule is 'indent_paren_nl'
indent_text : rule is 'indent_square_nl'
indent_text : rule is 'indent_paren_after_func_def'
indent_text : rule is 'indent_paren_after_func_decl'
indent_text : rule is 'indent_paren_after_func_call'
indent_text : rule is 'use_indent_continue_only_once'
indent_text : rule is 'indent_paren_after_func_decl'
indent_text : rule is 'indent_paren_after_func_def'
indent_text : rule is 'indent_paren_after_func_call'
indent_text : rule is 'indent_continue'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
space_col_align : first->orig_line is 5, orig_col is 1, [FUNC_CTOR_VAR/NONE], text() 'nTelIndex' <==>
space_col_align : second->orig_line is 5, orig_col is 10 [FPAREN_OPEN/FUNC_CTOR_VAR], text() '(', [CallStack]
do_space : orig_line is 5, orig_col is 1, first->text() 'nTelIndex', type is FUNC_CTOR_VAR
do_space : first->orig_line is 5, first->orig_col is 1, first->text() is 'nTelIndex', [FUNC_CTOR_VAR/NONE] <===>
   second->orig_line is 5, second->orig_col is 10, second->text() '(', [FPAREN_OPEN/FUNC_CTOR_VAR] : rule sp_func_call_paren[ ]
space_col_align : av is ignore
space_col_align :    len is 9
space_col_align :    => coldiff is 9
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 5
space_col_align :    => second->orig_line is 5
space_col_align :    => first->text()     is 'nTelIndex'
space_col_align :    => second->text()    is '('
space_col_align :    => first->orig_col   is 1
space_col_align :    => second->orig_col  is 10
space_col_align :    => first->len()      is 9
space_col_align :    => coldiff is 9
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 5, orig_col is 10, [FPAREN_OPEN/FUNC_CTOR_VAR], text() '(' <==>
space_col_align : second->orig_line is 5, orig_col is 11 [WORD/NONE], text() 'n', [CallStack]
do_space : orig_line is 5, orig_col is 10, first->text() '(', type is FPAREN_OPEN
do_space : first->orig_line is 5, first->orig_col is 10, first->text() is '(', [FPAREN_OPEN/FUNC_CTOR_VAR] <===>
   second->orig_line is 5, second->orig_col is 11, second->text() 'n', [WORD/NONE] : rule sp_inside_fparen[ ]
space_col_align : av is ignore
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 5
space_col_align :    => second->orig_line is 5
space_col_align :    => first->text()     is '('
space_col_align :    => second->text()    is 'n'
space_col_align :    => first->orig_col   is 10
space_col_align :    => second->orig_col  is 11
space_col_align :    => first->len()      is 1
space_col_align :    => coldiff is 1
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 5, orig_col is 11, [WORD/NONE], text() 'n' <==>
space_col_align : second->orig_line is 5, orig_col is 12 [FPAREN_CLOSE/FUNC_CTOR_VAR], text() ')', [CallStack]
do_space : orig_line is 5, orig_col is 11, first->text() 'n', type is WORD
do_space : first->orig_line is 5, first->orig_col is 11, first->text() is 'n', [WORD/NONE] <===>
   second->orig_line is 5, second->orig_col is 12, second->text() ')', [FPAREN_CLOSE/FUNC_CTOR_VAR] : rule sp_inside_fparen[ ]
space_col_align : av is ignore
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 5
space_col_align :    => second->orig_line is 5
space_col_align :    => first->text()     is 'n'
space_col_align :    => second->text()    is ')'
space_col_align :    => first->orig_col   is 11
space_col_align :    => second->orig_col  is 12
space_col_align :    => first->len()      is 1
space_col_align :    => coldiff is 1
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 5, orig_col is 12, [FPAREN_CLOSE/FUNC_CTOR_VAR], text() ')' <==>
space_col_align : second->orig_line is 5, orig_col is 13 [NEWLINE/NONE], text() '', [CallStack]
do_space : orig_line is 5, orig_col is 12, first->text() ')', type is FPAREN_CLOSE
space_col_align : av is remove
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
reindent_line : rule is 'indent_relative_single_line_comments'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_align_paren'
indent_text : rule is 'indent_paren_nl'
indent_text : rule is 'indent_square_nl'
indent_text : rule is 'indent_paren_after_func_def'
indent_text : rule is 'indent_paren_after_func_decl'
indent_text : rule is 'indent_paren_after_func_call'
indent_text : rule is 'use_indent_continue_only_once'
indent_text : rule is 'indent_paren_after_func_decl'
indent_text : rule is 'indent_paren_after_func_def'
indent_text : rule is 'indent_paren_after_func_call'
indent_text : rule is 'indent_continue'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_macro_brace'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
space_col_align : first->orig_line is 6, orig_col is 1, [BRACE_OPEN/FUNC_CLASS_DEF], text() '{' <==>
space_col_align : second->orig_line is 6, orig_col is 2 [NEWLINE/NONE], text() '', [CallStack]
do_space : orig_line is 6, orig_col is 1, first->text() '{', type is BRACE_OPEN
space_col_align : av is remove
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
reindent_line : rule is 'indent_relative_single_line_comments'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
space_col_align : first->orig_line is 7, orig_col is 1, [BRACE_CLOSE/FUNC_CLASS_DEF], text() '}' <==>
space_col_align : second->orig_line is 7, orig_col is 2 [NEWLINE/NONE], text() '', [CallStack]
do_space : orig_line is 7, orig_col is 1, first->text() '}', type is BRACE_CLOSE
space_col_align : av is remove
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
reindent_line : rule is 'indent_relative_single_line_comments'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
space_col_align : first->orig_line is 9, orig_col is 1, [DESTRUCTOR/NONE], text() '~' <==>
space_col_align : second->orig_line is 9, orig_col is 2 [FUNC_CLASS_DEF/DESTRUCTOR], text() 'TelegramIndex', [CallStack]
do_space : orig_line is 9, orig_col is 1, first->text() '~', type is DESTRUCTOR
do_space : first->orig_line is 9, first->orig_col is 1, first->text() is '~', [DESTRUCTOR/NONE] <===>
   second->orig_line is 9, second->orig_col is 2, second->text() 'TelegramIndex', [FUNC_CLASS_DEF/DESTRUCTOR] : rule REMOVE[ ]
space_col_align : av is remove
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 9, orig_col is 2, [FUNC_CLASS_DEF/DESTRUCTOR], text() 'TelegramIndex' <==>
space_col_align : second->orig_line is 9, orig_col is 15 [FPAREN_OPEN/FUNC_CLASS_DEF], text() '(', [CallStack]
do_space : orig_line is 9, orig_col is 2, first->text() 'TelegramIndex', type is FUNC_CLASS_DEF
do_space : first->orig_line is 9, first->orig_col is 2, first->text() is 'TelegramIndex', [FUNC_CLASS_DEF/DESTRUCTOR] <===>
   second->orig_line is 9, second->orig_col is 15, second->text() '(', [FPAREN_OPEN/FUNC_CLASS_DEF] : rule sp_func_class_paren[ ]
space_col_align : av is ignore
space_col_align :    len is 13
space_col_align :    => coldiff is 13
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 9
space_col_align :    => second->orig_line is 9
space_col_align :    => first->text()     is 'TelegramIndex'
space_col_align :    => second->text()    is '('
space_col_align :    => first->orig_col   is 2
space_col_align :    => second->orig_col  is 15
space_col_align :    => first->len()      is 13
space_col_align :    => coldiff is 13
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 9, orig_col is 15, [FPAREN_OPEN/FUNC_CLASS_DEF], text() '(' <==>
space_col_align : second->orig_line is 9, orig_col is 16 [FPAREN_CLOSE/FUNC_CLASS_DEF], text() ')', [CallStack]
do_space : orig_line is 9, orig_col is 15, first->text() '(', type is FPAREN_OPEN
do_space : first->orig_line is 9, first->orig_col is 15, first->text() is '(', [FPAREN_OPEN/FUNC_CLASS_DEF] <===>
   second->orig_line is 9, second->orig_col is 16, second->text() ')', [FPAREN_CLOSE/FUNC_CLASS_DEF] : rule sp_inside_fparens[ ]
space_col_align : av is ignore
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 9
space_col_align :    => second->orig_line is 9
space_col_align :    => first->text()     is '('
space_col_align :    => second->text()    is ')'
space_col_align :    => first->orig_col   is 15
space_col_align :    => second->orig_col  is 16
space_col_align :    => first->len()      is 1
space_col_align :    => coldiff is 1
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 9, orig_col is 16, [FPAREN_CLOSE/FUNC_CLASS_DEF], text() ')' <==>
space_col_align : second->orig_line is 9, orig_col is 17 [NEWLINE/NONE], text() '', [CallStack]
do_space : orig_line is 9, orig_col is 16, first->text() ')', type is FPAREN_CLOSE
space_col_align : av is remove
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
reindent_line : rule is 'indent_relative_single_line_comments'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_align_paren'
indent_text : rule is 'indent_paren_nl'
indent_text : rule is 'indent_square_nl'
indent_text : rule is 'indent_paren_after_func_def'
indent_text : rule is 'indent_paren_after_func_decl'
indent_text : rule is 'indent_paren_after_func_call'
indent_text : rule is 'use_indent_continue_only_once'
indent_text : rule is 'indent_paren_after_func_decl'
indent_text : rule is 'indent_paren_after_func_def'
indent_text : rule is 'indent_paren_after_func_call'
indent_text : rule is 'indent_continue'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_macro_brace'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
space_col_align : first->orig_line is 10, orig_col is 1, [BRACE_OPEN/FUNC_CLASS_DEF], text() '{' <==>
space_col_align : second->orig_line is 10, orig_col is 2 [NEWLINE/NONE], text() '', [CallStack]
do_space : orig_line is 10, orig_col is 1, first->text() '{', type is BRACE_OPEN
space_col_align : av is remove
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
reindent_line : rule is 'indent_relative_single_line_comments'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
space_col_align : first->orig_line is 11, orig_col is 1, [BRACE_CLOSE/FUNC_CLASS_DEF], text() '}' <==>
space_col_align : second->orig_line is 11, orig_col is 2 [NEWLINE/NONE], text() '', [CallStack]
do_space : orig_line is 11, orig_col is 1, first->text() '}', type is BRACE_CLOSE
space_col_align : av is remove
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
reindent_line : rule is 'indent_relative_single_line_comments'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
space_col_align : first->orig_line is 13, orig_col is 1, [QUALIFIER/NONE], text() 'const' <==>
space_col_align : second->orig_line is 13, orig_col is 7 [TYPE/NONE], text() 'char', [CallStack]
do_space : orig_line is 13, orig_col is 1, first->text() 'const', type is QUALIFIER
do_space : first->orig_line is 13, first->orig_col is 1, first->text() is 'const', [QUALIFIER/NONE] <===>
   second->orig_line is 13, second->orig_col is 7, second->text() 'char', [TYPE/NONE] : rule sp_after_type[ ]
 <force between 'const' and 'char'>space_col_align : av is force
space_col_align :    len is 5
space_col_align :    => coldiff is 5
space_col_align :    => av is FORCE
space_col_align :    => coldiff is 6
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 13, orig_col is 7, [TYPE/NONE], text() 'char' <==>
space_col_align : second->orig_line is 13, orig_col is 11 [PTR_TYPE/NONE], text() '*', [CallStack]
do_space : orig_line is 13, orig_col is 7, first->text() 'char', type is TYPE
do_space : first->orig_line is 13, first->orig_col is 7, first->text() is 'char', [TYPE/NONE] <===>
   second->orig_line is 13, second->orig_col is 11, second->text() '*', [PTR_TYPE/NONE] : rule IGNORE[ ]
space_col_align : av is ignore
space_col_align :    len is 4
space_col_align :    => coldiff is 4
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 13
space_col_align :    => second->orig_line is 13
space_col_align :    => first->text()     is 'char'
space_col_align :    => second->text()    is '*'
space_col_align :    => first->orig_col   is 7
space_col_align :    => second->orig_col  is 11
space_col_align :    => first->len()      is 4
space_col_align :    => coldiff is 4
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 13, orig_col is 11, [PTR_TYPE/NONE], text() '*' <==>
space_col_align : second->orig_line is 13, orig_col is 13 [QUALIFIER/NONE], text() 'const', [CallStack]
do_space : orig_line is 13, orig_col is 11, first->text() '*', type is PTR_TYPE
do_space : first->orig_line is 13, first->orig_col is 11, first->text() is '*', [PTR_TYPE/NONE] <===>
   second->orig_line is 13, second->orig_col is 13, second->text() 'const', [QUALIFIER/NONE] : rule IGNORE[ ]
space_col_align : av is ignore
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 13
space_col_align :    => second->orig_line is 13
space_col_align :    => first->text()     is '*'
space_col_align :    => second->text()    is 'const'
space_col_align :    => first->orig_col   is 11
space_col_align :    => second->orig_col  is 13
space_col_align :    => first->len()      is 1
space_col_align :    => coldiff is 2
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 13, orig_col is 13, [QUALIFIER/NONE], text() 'const' <==>
space_col_align : second->orig_line is 13, orig_col is 19 [WORD/NONE], text() 'pTelName', [CallStack]
do_space : orig_line is 13, orig_col is 13, first->text() 'const', type is QUALIFIER
do_space : first->orig_line is 13, first->orig_col is 13, first->text() is 'const', [QUALIFIER/NONE] <===>
   second->orig_line is 13, second->orig_col is 19, second->text() 'pTelName', [WORD/NONE] : rule sp_after_type[ ]
 <force between 'const' and 'pTelName'>space_col_align : av is force
space_col_align :    len is 5
space_col_align :    => coldiff is 5
space_col_align :    => av is FORCE
space_col_align :    => coldiff is 6
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 13, orig_col is 19, [WORD/NONE], text() 'pTelName' <==>
space_col_align : second->orig_line is 13, orig_col is 27 [SEMICOLON/NONE], text() ';', [CallStack]
do_space : orig_line is 13, orig_col is 19, first->text() 'pTelName', type is WORD
do_space : first->orig_line is 13, first->orig_col is 19, first->text() is 'pTelName', [WORD/NONE] <===>
   second->orig_line is 13, second->orig_col is 27, second->text() ';', [SEMICOLON/NONE] : rule sp_before_semi[ ]
space_col_align : av is remove
space_col_align :    len is 8
space_col_align :    => coldiff is 8
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 8
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 13, orig_col is 27, [SEMICOLON/NONE], text() ';' <==>
space_col_align : second->orig_line is 13, orig_col is 28 [NEWLINE/NONE], text() '', [CallStack]
do_space : orig_line is 13, orig_col is 27, first->text() ';', type is SEMICOLON
space_col_align : av is remove
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
reindent_line : rule is 'indent_relative_single_line_comments'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_continue'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
space_col_align : first->orig_line is 14, orig_col is 1, [TYPE/NONE], text() 'unsigned' <==>
space_col_align : second->orig_line is 14, orig_col is 10 [TYPE/NONE], text() 'long', [CallStack]
do_space : orig_line is 14, orig_col is 1, first->text() 'unsigned', type is TYPE
do_space : first->orig_line is 14, first->orig_col is 1, first->text() is 'unsigned', [TYPE/NONE] <===>
   second->orig_line is 14, second->orig_col is 10, second->text() 'long', [TYPE/NONE] : rule sp_after_type[ ]
 <force between 'unsigned' and 'long'>space_col_align : av is force
space_col_align :    len is 8
space_col_align :    => coldiff is 8
space_col_align :    => av is FORCE
space_col_align :    => coldiff is 9
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 14, orig_col is 10, [TYPE/NONE], text() 'long' <==>
space_col_align : second->orig_line is 14, orig_col is 15 [WORD/NONE], text() 'nTelIndex', [CallStack]
do_space : orig_line is 14, orig_col is 10, first->text() 'long', type is TYPE
do_space : first->orig_line is 14, first->orig_col is 10, first->text() is 'long', [TYPE/NONE] <===>
   second->orig_line is 14, second->orig_col is 15, second->text() 'nTelIndex', [WORD/NONE] : rule sp_after_type[ ]
 <force between 'long' and 'nTelIndex'>space_col_align : av is force
space_col_align :    len is 4
space_col_align :    => coldiff is 4
space_col_align :    => av is FORCE
space_col_align :    => coldiff is 5
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 14, orig_col is 15, [WORD/NONE], text() 'nTelIndex' <==>
space_col_align : second->orig_line is 14, orig_col is 24 [SEMICOLON/NONE], text() ';', [CallStack]
do_space : orig_line is 14, orig_col is 15, first->text() 'nTelIndex', type is WORD
do_space : first->orig_line is 14, first->orig_col is 15, first->text() is 'nTelIndex', [WORD/NONE] <===>
   second->orig_line is 14, second->orig_col is 24, second->text() ';', [SEMICOLON/NONE] : rule sp_before_semi[ ]
space_col_align : av is remove
space_col_align :    len is 9
space_col_align :    => coldiff is 9
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 9
reindent_line : rule is 'indent_relative_single_line_comments'
space_col_align : first->orig_line is 14, orig_col is 24, [SEMICOLON/NONE], text() ';' <==>
space_col_align : second->orig_line is 14, orig_col is 25 [NEWLINE/NONE], text() '', [CallStack]
do_space : orig_line is 14, orig_col is 24, first->text() ';', type is SEMICOLON
space_col_align : av is remove
space_col_align :    len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
reindent_line : rule is 'indent_relative_single_line_comments'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_continue'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
uncrustify_file : rule is 'mod_add_long_switch_closebrace_comment'
uncrustify_file : rule is 'mod_add_long_function_closebrace_comment'
uncrustify_file : rule is 'mod_add_long_class_closebrace_comment'
uncrustify_file : rule is 'mod_add_long_namespace_closebrace_comment'
uncrustify_file : rule is 'mod_add_long_ifdef_else_comment'
uncrustify_file : rule is 'mod_add_long_ifdef_endif_comment'
align_all : rule is 'align_typedef_span'
align_all : rule is 'align_left_shift'
Flush : rule is 'align_on_tabstop'
Flush : rule is 'align_on_tabstop'
Flush : rule is 'align_on_tabstop'
align_all : rule is 'align_oc_msg_colon_span'
align_all : rule is 'align_var_def_span'
align_all : rule is 'align_var_struct_span'
align_all : rule is 'align_var_class_span'
align_all : rule is 'align_enum_equ_span'
align_all : rule is 'align_assign_span'
align_all : rule is 'align_assign_thresh'
align_all : rule is 'align_struct_init_span'
align_all : rule is 'align_func_proto_span'
align_all : rule is 'align_mix_var_proto'
align_all : rule is 'align_oc_msg_spec_span'
align_all : rule is 'align_oc_decl_colon'
align_all : rule is 'align_asm_colon'
align_all : rule is 'align_func_params'
align_all : rule is 'align_func_params_span'
align_all : rule is 'align_same_func_call_params'
indent_text : rule is 'indent_columns'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_macro_brace'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_align_paren'
indent_text : rule is 'indent_paren_nl'
indent_text : rule is 'indent_square_nl'
indent_text : rule is 'indent_paren_after_func_def'
indent_text : rule is 'indent_paren_after_func_decl'
indent_text : rule is 'indent_paren_after_func_call'
indent_text : rule is 'use_indent_continue_only_once'
indent_text : rule is 'indent_paren_after_func_decl'
indent_text : rule is 'indent_paren_after_func_def'
indent_text : rule is 'indent_paren_after_func_call'
indent_text : rule is 'indent_continue'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_class_colon'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_align_paren'
indent_text : rule is 'indent_paren_nl'
indent_text : rule is 'indent_square_nl'
indent_text : rule is 'indent_paren_after_func_def'
indent_text : rule is 'indent_paren_after_func_decl'
indent_text : rule is 'indent_paren_after_func_call'
indent_text : rule is 'use_indent_continue_only_once'
indent_text : rule is 'indent_paren_after_func_decl'
indent_text : rule is 'indent_paren_after_func_def'
indent_text : rule is 'indent_paren_after_func_call'
indent_text : rule is 'indent_continue'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_align_paren'
indent_text : rule is 'indent_paren_nl'
indent_text : rule is 'indent_square_nl'
indent_text : rule is 'indent_paren_after_func_def'
indent_text : rule is 'indent_paren_after_func_decl'
indent_text : rule is 'indent_paren_after_func_call'
indent_text : rule is 'use_indent_continue_only_once'
indent_text : rule is 'indent_paren_after_func_decl'
indent_text : rule is 'indent_paren_after_func_def'
indent_text : rule is 'indent_paren_after_func_call'
indent_text : rule is 'indent_continue'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_macro_brace'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_align_paren'
indent_text : rule is 'indent_paren_nl'
indent_text : rule is 'indent_square_nl'
indent_text : rule is 'indent_paren_after_func_def'
indent_text : rule is 'indent_paren_after_func_decl'
indent_text : rule is 'indent_paren_after_func_call'
indent_text : rule is 'use_indent_continue_only_once'
indent_text : rule is 'indent_paren_after_func_decl'
indent_text : rule is 'indent_paren_after_func_def'
indent_text : rule is 'indent_paren_after_func_call'
indent_text : rule is 'indent_continue'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_macro_brace'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_continue'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_continue'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'pos_conditional'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
indent_text : rule is 'indent_col1_multi_string_literal'
indent_text : rule is 'use_options_overriding_for_qt_macros'
indent_text : rule is 'indent_brace_parent'
indent_text : rule is 'indent_func_def_force_col1'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_inside_ternary_operator'
indent_text : rule is 'indent_access_spec_body'
indent_text : rule is 'indent_oc_inside_msg_sel'
indent_text : rule is 'indent_single_newlines'
indent_text : rule is 'indent_braces'
indent_text : rule is 'indent_braces_no_func'
indent_text : rule is 'indent_braces_no_class'
indent_text : rule is 'indent_braces_no_struct'
indent_text : rule is 'indent_shift'
indent_text : rule is 'indent_xml_string'
indent_text : rule is 'indent_continue_class_head'
uncrustify_file : rule is 'code_width'
uncrustify_file : rule is 'align_nl_cont'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'indent_with_tabs'
output_text : rule is 'indent_with_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'indent_with_tabs'
output_text : rule is 'indent_with_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'indent_with_tabs'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
output_text : rule is 'indent_with_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'indent_with_tabs'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
output_text : rule is 'indent_with_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'indent_with_tabs'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
output_text : rule is 'indent_with_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'indent_with_tabs'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
output_text : rule is 'indent_with_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'indent_with_tabs'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
output_text : rule is 'indent_with_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'indent_with_tabs'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
output_text : rule is 'indent_with_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'indent_with_tabs'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
output_text : rule is 'indent_with_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'indent_with_tabs'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
output_text : rule is 'indent_with_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'indent_with_tabs'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
output_text : rule is 'indent_with_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'indent_with_tabs'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
next_tab_column : rule is 'output_tab_size'
output_text : rule is 'indent_with_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'indent_with_tabs'
output_text : rule is 'indent_with_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
output_text : rule is 'align_with_tabs'
output_text : rule is 'align_keep_tabs'
output_text : rule is 'cmt_convert_tab_to_spaces'
