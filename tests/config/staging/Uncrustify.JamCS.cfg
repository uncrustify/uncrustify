include Uncrustify.CSharp.cfg

# these options all come from experiments formatting RuntimeFiles.jam.cs to get something we like.

# the only real problem is that we would like nl_func_call_*_multi_line to pay attention to nesting. for example given
# `f(c(x))`, if `f` has its ( and ) on different lines, then it will also cause `c` to be treated as if it is true for
# its own parens. this means that a simple all-in-one func call will get broken out into separate lines. not always
# what we want. probably relatively easy to fix in uncrustify by adding nesting to the tracking of ( and ) for fcalls.

align_right_cmt_at_col=1
align_right_cmt_span=8
cmt_width=160
code_width=160
indent_func_class_param=true
indent_func_ctor_var_param=true
indent_template_param=true
ls_func_split_full=true
mod_full_brace_if=remove
mod_full_brace_if_chain=true
mod_full_brace_nl=2
nl_after_brace_close=true
nl_after_brace_open_cmt=true
nl_after_if=force
nl_after_vbrace_close=true
nl_after_vbrace_open_empty=true
nl_before_if=force
nl_before_return=true               # there's a bug in uncrustify where braces removed by mod_full_brace_if are still seen by this option, requiring a double-run of uncrustify to resolve :/
nl_func_call_args_multi_line=true
nl_func_call_start_multi_line=true

# like all the above, this is transitional. once we commit our .jam.cs files, we will remove the special handler and have
# them processed as ordinary .cs files, and then this flag will switch back on. before then, we will obviously have to
# go process all .jam.cs files to ensure they are not embedding tab chars in strings.
string_replace_tab_chars=false
