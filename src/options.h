/**
 * @file options.h
 * Enum and accessors for all the options.
 *
 * @author  Ben Gardner
 * @author  Guy Maurel since version 0.62 for uncrustify4Qt
 *          October 2015, 2016
 * @license GPL v2+
 */
#ifndef OPTIONS_H_INCLUDED
#define OPTIONS_H_INCLUDED

#include "option.h"

namespace uncrustify
{

namespace options
{

lineend_e &newlines();
size_t &input_tab_size();
size_t &output_tab_size();
size_t &string_escape_char();
size_t &string_escape_char2();
bool &string_replace_tab_chars();
bool &tok_split_gte();
std::string disable_processing_cmt();
std::string enable_processing_cmt();
bool &enable_digraphs();
iarf_e &utf8_bom();
bool &utf8_byte();
bool &utf8_force();
iarf_e &sp_arith();
iarf_e &sp_arith_additive();
iarf_e &sp_assign();
iarf_e &sp_cpp_lambda_assign();
iarf_e &sp_cpp_lambda_paren();
iarf_e &sp_assign_default();
iarf_e &sp_before_assign();
iarf_e &sp_after_assign();
iarf_e &sp_enum_paren();
iarf_e &sp_enum_assign();
iarf_e &sp_enum_before_assign();
iarf_e &sp_enum_after_assign();
iarf_e &sp_enum_colon();
iarf_e &sp_pp_concat();
iarf_e &sp_pp_stringify();
iarf_e &sp_before_pp_stringify();
iarf_e &sp_bool();
iarf_e &sp_compare();
iarf_e &sp_inside_paren();
iarf_e &sp_paren_paren();
iarf_e &sp_cparen_oparen();
bool &sp_balance_nested_parens();
iarf_e &sp_paren_brace();
iarf_e &sp_brace_brace();
iarf_e &sp_before_ptr_star();
iarf_e &sp_before_unnamed_ptr_star();
iarf_e &sp_between_ptr_star();
iarf_e &sp_after_ptr_star();
iarf_e &sp_after_ptr_block_caret();
iarf_e &sp_after_ptr_star_qualifier();
iarf_e &sp_after_ptr_star_func();
iarf_e &sp_ptr_star_paren();
iarf_e &sp_before_ptr_star_func();
iarf_e &sp_before_byref();
iarf_e &sp_before_unnamed_byref();
iarf_e &sp_after_byref();
iarf_e &sp_after_byref_func();
iarf_e &sp_before_byref_func();
iarf_e &sp_after_type();
iarf_e &sp_after_decltype();
iarf_e &sp_before_template_paren();
iarf_e &sp_template_angle();
iarf_e &sp_before_angle();
iarf_e &sp_inside_angle();
iarf_e &sp_angle_colon();
iarf_e &sp_after_angle();
iarf_e &sp_angle_paren();
iarf_e &sp_angle_paren_empty();
iarf_e &sp_angle_word();
iarf_e &sp_angle_shift();
bool &sp_permit_cpp11_shift();
iarf_e &sp_before_sparen();
iarf_e &sp_inside_sparen();
iarf_e &sp_inside_sparen_close();
iarf_e &sp_inside_sparen_open();
iarf_e &sp_after_sparen();
iarf_e &sp_sparen_brace();
iarf_e &sp_invariant_paren();
iarf_e &sp_after_invariant_paren();
iarf_e &sp_special_semi();
iarf_e &sp_before_semi();
iarf_e &sp_before_semi_for();
iarf_e &sp_before_semi_for_empty();
iarf_e &sp_after_semi();
iarf_e &sp_after_semi_for();
iarf_e &sp_after_semi_for_empty();
iarf_e &sp_before_square();
iarf_e &sp_before_squares();
iarf_e &sp_cpp_before_struct_binding();
iarf_e &sp_inside_square();
iarf_e &sp_inside_square_oc_array();
iarf_e &sp_after_comma();
iarf_e &sp_before_comma();
iarf_e &sp_after_mdatype_commas();
iarf_e &sp_before_mdatype_commas();
iarf_e &sp_between_mdatype_commas();
iarf_e &sp_paren_comma();
iarf_e &sp_before_ellipsis();
iarf_e &sp_type_ellipsis();
iarf_e &sp_paren_ellipsis();
iarf_e &sp_after_class_colon();
iarf_e &sp_before_class_colon();
iarf_e &sp_after_constr_colon();
iarf_e &sp_before_constr_colon();
iarf_e &sp_before_case_colon();
iarf_e &sp_after_operator();
iarf_e &sp_after_operator_sym();
iarf_e &sp_after_operator_sym_empty();
iarf_e &sp_after_cast();
iarf_e &sp_inside_paren_cast();
iarf_e &sp_cpp_cast_paren();
iarf_e &sp_sizeof_paren();
iarf_e &sp_sizeof_ellipsis();
iarf_e &sp_sizeof_ellipsis_paren();
iarf_e &sp_decltype_paren();
iarf_e &sp_after_tag();
iarf_e &sp_inside_braces_enum();
iarf_e &sp_inside_braces_struct();
iarf_e &sp_inside_braces_oc_dict();
iarf_e &sp_after_type_brace_init_lst_open();
iarf_e &sp_before_type_brace_init_lst_close();
iarf_e &sp_inside_type_brace_init_lst();
iarf_e &sp_inside_braces();
iarf_e &sp_inside_braces_empty();
iarf_e &sp_type_func();
iarf_e &sp_type_brace_init_lst();
iarf_e &sp_func_proto_paren();
iarf_e &sp_func_proto_paren_empty();
iarf_e &sp_func_def_paren();
iarf_e &sp_func_def_paren_empty();
iarf_e &sp_inside_fparens();
iarf_e &sp_inside_fparen();
iarf_e &sp_inside_tparen();
iarf_e &sp_after_tparen_close();
iarf_e &sp_square_fparen();
iarf_e &sp_fparen_brace();
iarf_e &sp_fparen_brace_initializer();
iarf_e &sp_fparen_dbrace();
iarf_e &sp_func_call_paren();
iarf_e &sp_func_call_paren_empty();
iarf_e &sp_func_call_user_paren();
iarf_e &sp_func_call_user_inside_fparen();
iarf_e &sp_func_call_user_paren_paren();
iarf_e &sp_func_class_paren();
iarf_e &sp_func_class_paren_empty();
iarf_e &sp_return_paren();
iarf_e &sp_return_brace();
iarf_e &sp_attribute_paren();
iarf_e &sp_defined_paren();
iarf_e &sp_throw_paren();
iarf_e &sp_after_throw();
iarf_e &sp_catch_paren();
iarf_e &sp_oc_catch_paren();
iarf_e &sp_version_paren();
iarf_e &sp_scope_paren();
iarf_e &sp_super_paren();
iarf_e &sp_this_paren();
iarf_e &sp_macro();
iarf_e &sp_macro_func();
iarf_e &sp_else_brace();
iarf_e &sp_brace_else();
iarf_e &sp_brace_typedef();
iarf_e &sp_catch_brace();
iarf_e &sp_oc_catch_brace();
iarf_e &sp_brace_catch();
iarf_e &sp_oc_brace_catch();
iarf_e &sp_finally_brace();
iarf_e &sp_brace_finally();
iarf_e &sp_try_brace();
iarf_e &sp_getset_brace();
iarf_e &sp_word_brace();
iarf_e &sp_word_brace_ns();
iarf_e &sp_before_dc();
iarf_e &sp_after_dc();
iarf_e &sp_d_array_colon();
iarf_e &sp_not();
iarf_e &sp_inv();
iarf_e &sp_addr();
iarf_e &sp_member();
iarf_e &sp_deref();
iarf_e &sp_sign();
iarf_e &sp_incdec();
iarf_e &sp_before_nl_cont();
iarf_e &sp_after_oc_scope();
iarf_e &sp_after_oc_colon();
iarf_e &sp_before_oc_colon();
iarf_e &sp_after_oc_dict_colon();
iarf_e &sp_before_oc_dict_colon();
iarf_e &sp_after_send_oc_colon();
iarf_e &sp_before_send_oc_colon();
iarf_e &sp_after_oc_type();
iarf_e &sp_after_oc_return_type();
iarf_e &sp_after_oc_at_sel();
iarf_e &sp_after_oc_at_sel_parens();
iarf_e &sp_inside_oc_at_sel_parens();
iarf_e &sp_before_oc_block_caret();
iarf_e &sp_after_oc_block_caret();
iarf_e &sp_after_oc_msg_receiver();
iarf_e &sp_after_oc_property();
iarf_e &sp_after_oc_synchronized();
iarf_e &sp_cond_colon();
iarf_e &sp_cond_colon_before();
iarf_e &sp_cond_colon_after();
iarf_e &sp_cond_question();
iarf_e &sp_cond_question_before();
iarf_e &sp_cond_question_after();
iarf_e &sp_cond_ternary_short();
iarf_e &sp_case_label();
iarf_e &sp_range();
iarf_e &sp_after_for_colon();
iarf_e &sp_before_for_colon();
iarf_e &sp_extern_paren();
iarf_e &sp_cmt_cpp_start();
bool &sp_cmt_cpp_doxygen();
bool &sp_cmt_cpp_qttr();
iarf_e &sp_endif_cmt();
iarf_e &sp_after_new();
iarf_e &sp_between_new_paren();
iarf_e &sp_after_newop_paren();
iarf_e &sp_inside_newop_paren();
iarf_e &sp_inside_newop_paren_open();
iarf_e &sp_inside_newop_paren_close();
iarf_e &sp_before_tr_emb_cmt();
size_t &sp_num_before_tr_emb_cmt();
iarf_e &sp_annotation_paren();
bool &sp_skip_vbrace_tokens();
iarf_e &sp_after_noexcept();
bool &force_tab_after_define();
size_t &indent_columns();
int &indent_continue();
size_t &indent_continue_class_head();
bool &indent_single_newlines();
size_t &indent_param();
size_t &indent_with_tabs();
bool &indent_cmt_with_tabs();
bool &indent_align_string();
size_t &indent_xml_string();
size_t &indent_brace();
bool &indent_braces();
bool &indent_braces_no_func();
bool &indent_braces_no_class();
bool &indent_braces_no_struct();
bool &indent_brace_parent();
bool &indent_paren_open_brace();
bool &indent_cs_delegate_brace();
bool &indent_cs_delegate_body();
bool &indent_namespace();
bool &indent_namespace_single_indent();
size_t &indent_namespace_level();
size_t &indent_namespace_limit();
bool &indent_extern();
bool &indent_class();
bool &indent_class_colon();
bool &indent_class_on_colon();
bool &indent_constr_colon();
size_t &indent_ctor_init_leading();
int &indent_ctor_init();
bool &indent_else_if();
int &indent_var_def_blk();
bool &indent_var_def_cont();
bool &indent_shift();
bool &indent_func_def_force_col1();
bool &indent_func_call_param();
bool &indent_func_def_param();
bool &indent_func_proto_param();
bool &indent_func_class_param();
bool &indent_func_ctor_var_param();
bool &indent_template_param();
bool &indent_func_param_double();
size_t &indent_func_const();
size_t &indent_func_throw();
size_t &indent_member();
bool &indent_member_single();
size_t &indent_sing_line_comments();
bool &indent_relative_single_line_comments();
size_t &indent_switch_case();
bool &indent_switch_pp();
size_t &indent_case_shift();
int &indent_case_brace();
bool &indent_col1_comment();
int &indent_label();
int &indent_access_spec();
bool &indent_access_spec_body();
bool &indent_paren_nl();
size_t &indent_paren_close();
bool &indent_paren_after_func_def();
bool &indent_paren_after_func_decl();
bool &indent_paren_after_func_call();
bool &indent_comma_paren();
bool &indent_bool_paren();
bool &indent_semicolon_for_paren();
bool &indent_first_bool_expr();
bool &indent_first_for_expr();
bool &indent_square_nl();
bool &indent_preserve_sql();
bool &indent_align_assign();
bool &indent_align_paren();
bool &indent_oc_block();
size_t &indent_oc_block_msg();
size_t &indent_oc_msg_colon();
bool &indent_oc_msg_prioritize_first_colon();
bool &indent_oc_block_msg_xcode_style();
bool &indent_oc_block_msg_from_keyword();
bool &indent_oc_block_msg_from_colon();
bool &indent_oc_block_msg_from_caret();
bool &indent_oc_block_msg_from_brace();
size_t &indent_min_vbrace_open();
bool &indent_vbrace_open_on_tabstop();
bool &indent_token_after_brace();
bool &indent_cpp_lambda_body();
bool &indent_using_block();
size_t &indent_ternary_operator();
bool &indent_off_after_return_new();
bool &indent_single_after_return();
bool &indent_ignore_asm_block();
bool &nl_collapse_empty_body();
bool &nl_assign_leave_one_liners();
bool &nl_class_leave_one_liners();
bool &nl_enum_leave_one_liners();
bool &nl_getset_leave_one_liners();
bool &nl_cs_property_leave_one_liners();
bool &nl_func_leave_one_liners();
bool &nl_cpp_lambda_leave_one_liners();
bool &nl_if_leave_one_liners();
bool &nl_while_leave_one_liners();
bool &nl_for_leave_one_liners();
bool &nl_oc_msg_leave_one_liner();
iarf_e &nl_oc_mdef_brace();
iarf_e &nl_oc_block_brace();
iarf_e &nl_oc_interface_brace();
iarf_e &nl_oc_implementation_brace();
iarf_e &nl_start_of_file();
size_t &nl_start_of_file_min();
iarf_e &nl_end_of_file();
size_t &nl_end_of_file_min();
iarf_e &nl_assign_brace();
iarf_e &nl_assign_square();
iarf_e &nl_tsquare_brace();
iarf_e &nl_after_square_assign();
size_t &nl_func_var_def_blk();
size_t &nl_typedef_blk_start();
size_t &nl_typedef_blk_end();
size_t &nl_typedef_blk_in();
size_t &nl_var_def_blk_start();
size_t &nl_var_def_blk_end();
size_t &nl_var_def_blk_in();
iarf_e &nl_fcall_brace();
iarf_e &nl_enum_brace();
iarf_e &nl_enum_class();
iarf_e &nl_enum_class_identifier();
iarf_e &nl_enum_identifier_colon();
iarf_e &nl_enum_colon_type();
iarf_e &nl_struct_brace();
iarf_e &nl_union_brace();
iarf_e &nl_if_brace();
iarf_e &nl_brace_else();
iarf_e &nl_elseif_brace();
iarf_e &nl_else_brace();
iarf_e &nl_else_if();
iarf_e &nl_before_if_closing_paren();
iarf_e &nl_brace_finally();
iarf_e &nl_finally_brace();
iarf_e &nl_try_brace();
iarf_e &nl_getset_brace();
iarf_e &nl_for_brace();
iarf_e &nl_catch_brace();
iarf_e &nl_oc_catch_brace();
iarf_e &nl_brace_catch();
iarf_e &nl_oc_brace_catch();
iarf_e &nl_brace_square();
iarf_e &nl_brace_fparen();
iarf_e &nl_while_brace();
iarf_e &nl_scope_brace();
iarf_e &nl_unittest_brace();
iarf_e &nl_version_brace();
iarf_e &nl_using_brace();
iarf_e &nl_brace_brace();
iarf_e &nl_do_brace();
iarf_e &nl_brace_while();
iarf_e &nl_switch_brace();
iarf_e &nl_synchronized_brace();
bool &nl_multi_line_cond();
bool &nl_multi_line_define();
bool &nl_before_case();
iarf_e &nl_before_throw();
bool &nl_after_case();
iarf_e &nl_case_colon_brace();
iarf_e &nl_namespace_brace();
iarf_e &nl_template_class();
iarf_e &nl_class_brace();
iarf_e &nl_class_init_args();
iarf_e &nl_constr_init_args();
iarf_e &nl_enum_own_lines();
iarf_e &nl_func_type_name();
iarf_e &nl_func_type_name_class();
iarf_e &nl_func_class_scope();
iarf_e &nl_func_scope_name();
iarf_e &nl_func_proto_type_name();
iarf_e &nl_func_paren();
iarf_e &nl_func_paren_empty();
iarf_e &nl_func_def_paren();
iarf_e &nl_func_def_paren_empty();
iarf_e &nl_func_call_paren();
iarf_e &nl_func_call_paren_empty();
iarf_e &nl_func_decl_start();
iarf_e &nl_func_def_start();
iarf_e &nl_func_decl_start_single();
iarf_e &nl_func_def_start_single();
bool &nl_func_decl_start_multi_line();
bool &nl_func_def_start_multi_line();
iarf_e &nl_func_decl_args();
iarf_e &nl_func_def_args();
bool &nl_func_decl_args_multi_line();
bool &nl_func_def_args_multi_line();
iarf_e &nl_func_decl_end();
iarf_e &nl_func_def_end();
iarf_e &nl_func_decl_end_single();
iarf_e &nl_func_def_end_single();
bool &nl_func_decl_end_multi_line();
bool &nl_func_def_end_multi_line();
iarf_e &nl_func_decl_empty();
iarf_e &nl_func_def_empty();
iarf_e &nl_func_call_empty();
bool &nl_func_call_start_multi_line();
bool &nl_func_call_args_multi_line();
bool &nl_func_call_end_multi_line();
bool &nl_oc_msg_args();
iarf_e &nl_fdef_brace();
iarf_e &nl_cpp_ldef_brace();
iarf_e &nl_return_expr();
bool &nl_after_semicolon();
iarf_e &nl_paren_dbrace_open();
iarf_e &nl_type_brace_init_lst();
iarf_e &nl_type_brace_init_lst_open();
iarf_e &nl_type_brace_init_lst_close();
bool &nl_after_brace_open();
bool &nl_after_brace_open_cmt();
bool &nl_after_vbrace_open();
bool &nl_after_vbrace_open_empty();
bool &nl_after_brace_close();
bool &nl_after_vbrace_close();
iarf_e &nl_brace_struct_var();
bool &nl_define_macro();
bool &nl_squeeze_paren_close();
bool &nl_squeeze_ifdef();
bool &nl_squeeze_ifdef_top_level();
iarf_e &nl_before_if();
iarf_e &nl_after_if();
iarf_e &nl_before_for();
iarf_e &nl_after_for();
iarf_e &nl_before_while();
iarf_e &nl_after_while();
iarf_e &nl_before_switch();
iarf_e &nl_after_switch();
iarf_e &nl_before_synchronized();
iarf_e &nl_after_synchronized();
iarf_e &nl_before_do();
iarf_e &nl_after_do();
bool &nl_ds_struct_enum_cmt();
bool &nl_ds_struct_enum_close_brace();
size_t &nl_before_func_class_def();
size_t &nl_before_func_class_proto();
iarf_e &nl_class_colon();
iarf_e &nl_constr_colon();
bool &nl_namespace_two_to_one_liner();
bool &nl_create_if_one_liner();
bool &nl_create_for_one_liner();
bool &nl_create_while_one_liner();
bool &nl_create_func_def_one_liner();
bool &nl_split_if_one_liner();
bool &nl_split_for_one_liner();
bool &nl_split_while_one_liner();
size_t &nl_max();
size_t &nl_max_blank_in_func();
size_t &nl_after_func_proto();
size_t &nl_after_func_proto_group();
size_t &nl_after_func_class_proto();
size_t &nl_after_func_class_proto_group();
bool &nl_class_leave_one_liner_groups();
size_t &nl_before_func_body_def();
size_t &nl_before_func_body_proto();
size_t &nl_after_func_body();
size_t &nl_after_func_body_class();
size_t &nl_after_func_body_one_liner();
size_t &nl_before_block_comment();
size_t &nl_before_c_comment();
size_t &nl_before_cpp_comment();
bool &nl_after_multiline_comment();
bool &nl_after_label_colon();
size_t &nl_after_struct();
size_t &nl_before_class();
size_t &nl_after_class();
size_t &nl_before_access_spec();
size_t &nl_after_access_spec();
size_t &nl_comment_func_def();
size_t &nl_after_try_catch_finally();
size_t &nl_around_cs_property();
size_t &nl_between_get_set();
iarf_e &nl_property_brace();
size_t &nl_inside_namespace();
bool &eat_blanks_after_open_brace();
bool &eat_blanks_before_close_brace();
size_t &nl_remove_extra_newlines();
bool &nl_before_return();
bool &nl_after_return();
iarf_e &nl_after_annotation();
iarf_e &nl_between_annotation();
tokenpos_e &pos_arith();
tokenpos_e &pos_assign();
tokenpos_e &pos_bool();
tokenpos_e &pos_compare();
tokenpos_e &pos_conditional();
tokenpos_e &pos_comma();
tokenpos_e &pos_enum_comma();
tokenpos_e &pos_class_comma();
tokenpos_e &pos_constr_comma();
tokenpos_e &pos_class_colon();
tokenpos_e &pos_constr_colon();
size_t &code_width();
bool &ls_for_split_full();
bool &ls_func_split_full();
bool &ls_code_width();
bool &align_keep_tabs();
bool &align_with_tabs();
bool &align_on_tabstop();
bool &align_number_right();
bool &align_keep_extra_space();
bool &align_func_params();
size_t &align_func_params_span();
size_t &align_func_params_thresh();
size_t &align_func_params_gap();
bool &align_same_func_call_params();
size_t &align_var_def_span();
size_t &align_var_def_star_style();
size_t &align_var_def_amp_style();
size_t &align_var_def_thresh();
size_t &align_var_def_gap();
bool &align_var_def_colon();
size_t &align_var_def_colon_gap();
bool &align_var_def_attribute();
bool &align_var_def_inline();
size_t &align_assign_span();
size_t &align_assign_thresh();
size_t &align_assign_decl_func();
size_t &align_enum_equ_span();
size_t &align_enum_equ_thresh();
size_t &align_var_class_span();
size_t &align_var_class_thresh();
size_t &align_var_class_gap();
size_t &align_var_struct_span();
size_t &align_var_struct_thresh();
size_t &align_var_struct_gap();
size_t &align_struct_init_span();
size_t &align_typedef_gap();
size_t &align_typedef_span();
size_t &align_typedef_func();
size_t &align_typedef_star_style();
size_t &align_typedef_amp_style();
size_t &align_right_cmt_span();
bool &align_right_cmt_mix();
bool &align_right_cmt_same_level();
size_t &align_right_cmt_gap();
size_t &align_right_cmt_at_col();
size_t &align_func_proto_span();
size_t &align_func_proto_gap();
bool &align_on_operator();
bool &align_mix_var_proto();
bool &align_single_line_func();
bool &align_single_line_brace();
size_t &align_single_line_brace_gap();
size_t &align_oc_msg_spec_span();
bool &align_nl_cont();
bool &align_pp_define_together();
size_t &align_pp_define_gap();
size_t &align_pp_define_span();
bool &align_left_shift();
bool &align_asm_colon();
size_t &align_oc_msg_colon_span();
bool &align_oc_msg_colon_first();
bool &align_oc_decl_colon();
size_t &cmt_width();
size_t &cmt_reflow_mode();
bool &cmt_convert_tab_to_spaces();
bool &cmt_indent_multi();
bool &cmt_c_group();
bool &cmt_c_nl_start();
bool &cmt_c_nl_end();
bool &cmt_cpp_group();
bool &cmt_cpp_nl_start();
bool &cmt_cpp_nl_end();
bool &cmt_cpp_to_c();
bool &cmt_star_cont();
size_t &cmt_sp_before_star_cont();
int &cmt_sp_after_star_cont();
bool &cmt_multi_check_last();
size_t &cmt_multi_first_len_minimum();
std::string cmt_insert_file_header();
std::string cmt_insert_file_footer();
std::string cmt_insert_func_header();
std::string cmt_insert_class_header();
std::string cmt_insert_oc_msg_header();
bool &cmt_insert_before_preproc();
bool &cmt_insert_before_inlines();
bool &cmt_insert_before_ctor_dtor();
iarf_e &mod_full_brace_do();
iarf_e &mod_full_brace_for();
iarf_e &mod_full_brace_function();
iarf_e &mod_full_brace_if();
bool &mod_full_brace_if_chain();
bool &mod_full_brace_if_chain_only();
size_t &mod_full_brace_nl();
bool &mod_full_brace_nl_block_rem_mlcond();
iarf_e &mod_full_brace_while();
iarf_e &mod_full_brace_using();
iarf_e &mod_paren_on_return();
bool &mod_pawn_semicolon();
bool &mod_full_paren_if_bool();
bool &mod_remove_extra_semicolon();
size_t &mod_add_long_function_closebrace_comment();
size_t &mod_add_long_namespace_closebrace_comment();
size_t &mod_add_long_class_closebrace_comment();
size_t &mod_add_long_switch_closebrace_comment();
size_t &mod_add_long_ifdef_endif_comment();
size_t &mod_add_long_ifdef_else_comment();
bool &mod_sort_import();
bool &mod_sort_using();
bool &mod_sort_include();
bool &mod_move_case_break();
iarf_e &mod_case_brace();
bool &mod_remove_empty_return();
bool &mod_sort_oc_properties();
int &mod_sort_oc_property_class_weight();
int &mod_sort_oc_property_thread_safe_weight();
int &mod_sort_oc_property_readwrite_weight();
int &mod_sort_oc_property_reference_weight();
int &mod_sort_oc_property_getter_weight();
int &mod_sort_oc_property_setter_weight();
int &mod_sort_oc_property_nullability_weight();
iarf_e &mod_enum_last_comma();
iarf_e &pp_indent();
bool &pp_indent_at_level();
size_t &pp_indent_count();
iarf_e &pp_space();
size_t &pp_space_count();
int &pp_indent_region();
bool &pp_region_indent_code();
int &pp_indent_if();
bool &pp_if_indent_code();
bool &pp_define_at_level();
bool &pp_ignore_define_body();
bool &pp_indent_case();
bool &pp_indent_func_def();
bool &pp_indent_extern();
bool &pp_indent_brace();
std::string include_category_0();
std::string include_category_1();
std::string include_category_2();
bool &use_indent_func_call_param();
bool &use_indent_continue_only_once();
bool &indent_cpp_lambda_only_once();
bool &use_options_overriding_for_qt_macros();
size_t &warn_level_tabs_found_in_verbatim_string_literals();

} // namespace options

} // namespace uncrustify

#endif /* OPTIONS_H_INCLUDED */
